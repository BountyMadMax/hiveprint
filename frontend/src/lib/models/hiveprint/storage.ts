// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FileProtocol } from '../hiveprint/file-protocol.js';


export class Storage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Storage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStorage(bb:flatbuffers.ByteBuffer, obj?:Storage):Storage {
  return (obj || new Storage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStorage(bb:flatbuffers.ByteBuffer, obj?:Storage):Storage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Storage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hostname():string|null
hostname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
hostname(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

user():string|null
user(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
user(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

password():string|null
password(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
password(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

protocol():FileProtocol {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : FileProtocol.NFS;
}

protocolMajorVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

protocolMinorVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

protocolPatchVersion():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startStorage(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, descriptionOffset, 0);
}

static addHostname(builder:flatbuffers.Builder, hostnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, hostnameOffset, 0);
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, userOffset, 0);
}

static addPassword(builder:flatbuffers.Builder, passwordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, passwordOffset, 0);
}

static addProtocol(builder:flatbuffers.Builder, protocol:FileProtocol) {
  builder.addFieldInt8(5, protocol, FileProtocol.NFS);
}

static addProtocolMajorVersion(builder:flatbuffers.Builder, protocolMajorVersion:number) {
  builder.addFieldInt16(6, protocolMajorVersion, 0);
}

static addProtocolMinorVersion(builder:flatbuffers.Builder, protocolMinorVersion:number) {
  builder.addFieldInt16(7, protocolMinorVersion, 0);
}

static addProtocolPatchVersion(builder:flatbuffers.Builder, protocolPatchVersion:number) {
  builder.addFieldInt16(8, protocolPatchVersion, 0);
}

static endStorage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishStorageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedStorageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createStorage(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, hostnameOffset:flatbuffers.Offset, userOffset:flatbuffers.Offset, passwordOffset:flatbuffers.Offset, protocol:FileProtocol, protocolMajorVersion:number, protocolMinorVersion:number, protocolPatchVersion:number):flatbuffers.Offset {
  Storage.startStorage(builder);
  Storage.addName(builder, nameOffset);
  Storage.addDescription(builder, descriptionOffset);
  Storage.addHostname(builder, hostnameOffset);
  Storage.addUser(builder, userOffset);
  Storage.addPassword(builder, passwordOffset);
  Storage.addProtocol(builder, protocol);
  Storage.addProtocolMajorVersion(builder, protocolMajorVersion);
  Storage.addProtocolMinorVersion(builder, protocolMinorVersion);
  Storage.addProtocolPatchVersion(builder, protocolPatchVersion);
  return Storage.endStorage(builder);
}
}
