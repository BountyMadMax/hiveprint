package protos

import (
	context "context"
	fmt "fmt"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	gorm "gorm.io/gorm"
	proto "models/proto"
	strings "strings"
)

type ConfigORM struct {
	Id    int32
	Key   string
	Value string
}

// TableName overrides the default tablename generated by GORM
func (ConfigORM) TableName() string {
	return "configs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Config) ToORM(ctx context.Context) (ConfigORM, error) {
	to := ConfigORM{}
	var err error
	if prehook, ok := interface{}(m).(ConfigWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Key = m.Key
	to.Value = m.Value
	if posthook, ok := interface{}(m).(ConfigWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ConfigORM) ToPB(ctx context.Context) (Config, error) {
	to := Config{}
	var err error
	if prehook, ok := interface{}(m).(ConfigWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Key = m.Key
	to.Value = m.Value
	if posthook, ok := interface{}(m).(ConfigWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Config the arg will be the target, the caller the one being converted from

// ConfigBeforeToORM called before default ToORM code
type ConfigWithBeforeToORM interface {
	BeforeToORM(context.Context, *ConfigORM) error
}

// ConfigAfterToORM called after default ToORM code
type ConfigWithAfterToORM interface {
	AfterToORM(context.Context, *ConfigORM) error
}

// ConfigBeforeToPB called before default ToPB code
type ConfigWithBeforeToPB interface {
	BeforeToPB(context.Context, *Config) error
}

// ConfigAfterToPB called after default ToPB code
type ConfigWithAfterToPB interface {
	AfterToPB(context.Context, *Config) error
}

type UserConfigORM struct {
	Id     int32
	Key    string
	User   *proto.UserORM `gorm:"foreignKey:UserId;references:Id"`
	UserId *int32
	Value  string
}

// TableName overrides the default tablename generated by GORM
func (UserConfigORM) TableName() string {
	return "user_configs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *UserConfig) ToORM(ctx context.Context) (UserConfigORM, error) {
	to := UserConfigORM{}
	var err error
	if prehook, ok := interface{}(m).(UserConfigWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Key = m.Key
	to.Value = m.Value
	if m.User != nil {
		tempUser, err := m.User.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.User = &tempUser
	}
	if posthook, ok := interface{}(m).(UserConfigWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *UserConfigORM) ToPB(ctx context.Context) (UserConfig, error) {
	to := UserConfig{}
	var err error
	if prehook, ok := interface{}(m).(UserConfigWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Key = m.Key
	to.Value = m.Value
	if m.User != nil {
		tempUser, err := m.User.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.User = &tempUser
	}
	if posthook, ok := interface{}(m).(UserConfigWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type UserConfig the arg will be the target, the caller the one being converted from

// UserConfigBeforeToORM called before default ToORM code
type UserConfigWithBeforeToORM interface {
	BeforeToORM(context.Context, *UserConfigORM) error
}

// UserConfigAfterToORM called after default ToORM code
type UserConfigWithAfterToORM interface {
	AfterToORM(context.Context, *UserConfigORM) error
}

// UserConfigBeforeToPB called before default ToPB code
type UserConfigWithBeforeToPB interface {
	BeforeToPB(context.Context, *UserConfig) error
}

// UserConfigAfterToPB called after default ToPB code
type UserConfigWithAfterToPB interface {
	AfterToPB(context.Context, *UserConfig) error
}

// DefaultCreateConfig executes a basic gorm create call
func DefaultCreateConfig(ctx context.Context, in *Config, db *gorm.DB) (*Config, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ConfigORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConfigORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadConfig(ctx context.Context, in *Config, db *gorm.DB) (*Config, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ConfigORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ConfigORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ConfigORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConfigORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConfigORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteConfig(ctx context.Context, in *Config, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ConfigORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ConfigORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConfigORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteConfigSet(ctx context.Context, in []*Config, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ConfigORM{})).(ConfigORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ConfigORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ConfigORM{})).(ConfigORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ConfigORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Config, *gorm.DB) (*gorm.DB, error)
}
type ConfigORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Config, *gorm.DB) error
}

// DefaultStrictUpdateConfig clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateConfig(ctx context.Context, in *Config, db *gorm.DB) (*Config, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateConfig")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ConfigORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ConfigORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ConfigORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConfigORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConfigORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchConfig executes a basic gorm update call with patch behavior
func DefaultPatchConfig(ctx context.Context, in *Config, updateMask *field_mask.FieldMask, db *gorm.DB) (*Config, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Config
	var err error
	if hook, ok := interface{}(&pbObj).(ConfigWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadConfig(ctx, &Config{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ConfigWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskConfig(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ConfigWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateConfig(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ConfigWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ConfigWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Config, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConfigWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Config, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConfigWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Config, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ConfigWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Config, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetConfig executes a bulk gorm update call with patch behavior
func DefaultPatchSetConfig(ctx context.Context, objects []*Config, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Config, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Config, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchConfig(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskConfig patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskConfig(ctx context.Context, patchee *Config, patcher *Config, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Config, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Key" {
			patchee.Key = patcher.Key
			continue
		}
		if f == prefix+"Value" {
			patchee.Value = patcher.Value
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListConfig executes a gorm list call
func DefaultListConfig(ctx context.Context, db *gorm.DB) ([]*Config, error) {
	in := Config{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ConfigORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ConfigORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Config{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ConfigORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConfigORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ConfigORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ConfigORM) error
}

// DefaultCreateUserConfig executes a basic gorm create call
func DefaultCreateUserConfig(ctx context.Context, in *UserConfig, db *gorm.DB) (*UserConfig, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type UserConfigORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserConfigORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadUserConfig(ctx context.Context, in *UserConfig, db *gorm.DB) (*UserConfig, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := UserConfigORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(UserConfigORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type UserConfigORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserConfigORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserConfigORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteUserConfig(ctx context.Context, in *UserConfig, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&UserConfigORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type UserConfigORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserConfigORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteUserConfigSet(ctx context.Context, in []*UserConfig, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&UserConfigORM{})).(UserConfigORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&UserConfigORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&UserConfigORM{})).(UserConfigORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type UserConfigORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*UserConfig, *gorm.DB) (*gorm.DB, error)
}
type UserConfigORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*UserConfig, *gorm.DB) error
}

// DefaultStrictUpdateUserConfig clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateUserConfig(ctx context.Context, in *UserConfig, db *gorm.DB) (*UserConfig, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateUserConfig")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &UserConfigORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type UserConfigORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserConfigORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserConfigORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchUserConfig executes a basic gorm update call with patch behavior
func DefaultPatchUserConfig(ctx context.Context, in *UserConfig, updateMask *field_mask.FieldMask, db *gorm.DB) (*UserConfig, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj UserConfig
	var err error
	if hook, ok := interface{}(&pbObj).(UserConfigWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadUserConfig(ctx, &UserConfig{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(UserConfigWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskUserConfig(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(UserConfigWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateUserConfig(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(UserConfigWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type UserConfigWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *UserConfig, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type UserConfigWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *UserConfig, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type UserConfigWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *UserConfig, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type UserConfigWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *UserConfig, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetUserConfig executes a bulk gorm update call with patch behavior
func DefaultPatchSetUserConfig(ctx context.Context, objects []*UserConfig, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*UserConfig, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*UserConfig, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchUserConfig(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskUserConfig patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskUserConfig(ctx context.Context, patchee *UserConfig, patcher *UserConfig, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*UserConfig, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedUser bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Key" {
			patchee.Key = patcher.Key
			continue
		}
		if f == prefix+"Value" {
			patchee.Value = patcher.Value
			continue
		}
		if !updatedUser && strings.HasPrefix(f, prefix+"User.") {
			updatedUser = true
			if patcher.User == nil {
				patchee.User = nil
				continue
			}
			if patchee.User == nil {
				patchee.User = &User{}
			}
			if o, err := DefaultApplyFieldMaskUser(ctx, patchee.User, patcher.User, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"User.", db); err != nil {
				return nil, err
			} else {
				patchee.User = o
			}
			continue
		}
		if f == prefix+"User" {
			updatedUser = true
			patchee.User = patcher.User
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListUserConfig executes a gorm list call
func DefaultListUserConfig(ctx context.Context, db *gorm.DB) ([]*UserConfig, error) {
	in := UserConfig{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []UserConfigORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(UserConfigORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*UserConfig{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type UserConfigORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserConfigORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type UserConfigORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]UserConfigORM) error
}
