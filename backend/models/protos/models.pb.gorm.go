package protos

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/v2/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	gorm "gorm.io/gorm"
	strings "strings"
)

type ModelORM struct {
	CreatorId   *int32
	Creators    []*CreatorORM `gorm:"foreignKey:ModelId;references:Id"`
	Description *string
	Id          int32
	ModelPartId *int32
	ModelParts  []*ModelPartORM `gorm:"foreignKey:ModelId;references:Id"`
	Name        string
}

// TableName overrides the default tablename generated by GORM
func (ModelORM) TableName() string {
	return "models"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Model) ToORM(ctx context.Context) (ModelORM, error) {
	to := ModelORM{}
	var err error
	if prehook, ok := interface{}(m).(ModelWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	for _, v := range m.ModelParts {
		if v != nil {
			if tempModelParts, cErr := v.ToORM(ctx); cErr == nil {
				to.ModelParts = append(to.ModelParts, &tempModelParts)
			} else {
				return to, cErr
			}
		} else {
			to.ModelParts = append(to.ModelParts, nil)
		}
	}
	for _, v := range m.Creators {
		if v != nil {
			if tempCreators, cErr := v.ToORM(ctx); cErr == nil {
				to.Creators = append(to.Creators, &tempCreators)
			} else {
				return to, cErr
			}
		} else {
			to.Creators = append(to.Creators, nil)
		}
	}
	if posthook, ok := interface{}(m).(ModelWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ModelORM) ToPB(ctx context.Context) (Model, error) {
	to := Model{}
	var err error
	if prehook, ok := interface{}(m).(ModelWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	for _, v := range m.ModelParts {
		if v != nil {
			if tempModelParts, cErr := v.ToPB(ctx); cErr == nil {
				to.ModelParts = append(to.ModelParts, &tempModelParts)
			} else {
				return to, cErr
			}
		} else {
			to.ModelParts = append(to.ModelParts, nil)
		}
	}
	for _, v := range m.Creators {
		if v != nil {
			if tempCreators, cErr := v.ToPB(ctx); cErr == nil {
				to.Creators = append(to.Creators, &tempCreators)
			} else {
				return to, cErr
			}
		} else {
			to.Creators = append(to.Creators, nil)
		}
	}
	if posthook, ok := interface{}(m).(ModelWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Model the arg will be the target, the caller the one being converted from

// ModelBeforeToORM called before default ToORM code
type ModelWithBeforeToORM interface {
	BeforeToORM(context.Context, *ModelORM) error
}

// ModelAfterToORM called after default ToORM code
type ModelWithAfterToORM interface {
	AfterToORM(context.Context, *ModelORM) error
}

// ModelBeforeToPB called before default ToPB code
type ModelWithBeforeToPB interface {
	BeforeToPB(context.Context, *Model) error
}

// ModelAfterToPB called after default ToPB code
type ModelWithAfterToPB interface {
	AfterToPB(context.Context, *Model) error
}

type ModelPartORM struct {
	CreatorId   *int32
	Creators    []*CreatorORM `gorm:"foreignKey:ModelPartId;references:Id"`
	Description *string
	Id          int32
	ModelId     *int32
	Models      []*ModelORM `gorm:"foreignKey:ModelPartId;references:Id"`
	Name        string
}

// TableName overrides the default tablename generated by GORM
func (ModelPartORM) TableName() string {
	return "model_parts"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *ModelPart) ToORM(ctx context.Context) (ModelPartORM, error) {
	to := ModelPartORM{}
	var err error
	if prehook, ok := interface{}(m).(ModelPartWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	for _, v := range m.Models {
		if v != nil {
			if tempModels, cErr := v.ToORM(ctx); cErr == nil {
				to.Models = append(to.Models, &tempModels)
			} else {
				return to, cErr
			}
		} else {
			to.Models = append(to.Models, nil)
		}
	}
	for _, v := range m.Creators {
		if v != nil {
			if tempCreators, cErr := v.ToORM(ctx); cErr == nil {
				to.Creators = append(to.Creators, &tempCreators)
			} else {
				return to, cErr
			}
		} else {
			to.Creators = append(to.Creators, nil)
		}
	}
	if posthook, ok := interface{}(m).(ModelPartWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ModelPartORM) ToPB(ctx context.Context) (ModelPart, error) {
	to := ModelPart{}
	var err error
	if prehook, ok := interface{}(m).(ModelPartWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	for _, v := range m.Models {
		if v != nil {
			if tempModels, cErr := v.ToPB(ctx); cErr == nil {
				to.Models = append(to.Models, &tempModels)
			} else {
				return to, cErr
			}
		} else {
			to.Models = append(to.Models, nil)
		}
	}
	for _, v := range m.Creators {
		if v != nil {
			if tempCreators, cErr := v.ToPB(ctx); cErr == nil {
				to.Creators = append(to.Creators, &tempCreators)
			} else {
				return to, cErr
			}
		} else {
			to.Creators = append(to.Creators, nil)
		}
	}
	if posthook, ok := interface{}(m).(ModelPartWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type ModelPart the arg will be the target, the caller the one being converted from

// ModelPartBeforeToORM called before default ToORM code
type ModelPartWithBeforeToORM interface {
	BeforeToORM(context.Context, *ModelPartORM) error
}

// ModelPartAfterToORM called after default ToORM code
type ModelPartWithAfterToORM interface {
	AfterToORM(context.Context, *ModelPartORM) error
}

// ModelPartBeforeToPB called before default ToPB code
type ModelPartWithBeforeToPB interface {
	BeforeToPB(context.Context, *ModelPart) error
}

// ModelPartAfterToPB called after default ToPB code
type ModelPartWithAfterToPB interface {
	AfterToPB(context.Context, *ModelPart) error
}

type CreatorORM struct {
	CreatorLinkId *int32
	Description   *string
	Id            int32
	Links         []*CreatorLinkORM `gorm:"foreignKey:CreatorId;references:Id"`
	ModelId       *int32
	ModelPartId   *int32
	ModelParts    []*ModelPartORM `gorm:"foreignKey:CreatorId;references:Id"`
	Models        []*ModelORM     `gorm:"foreignKey:CreatorId;references:Id"`
	Name          string
}

// TableName overrides the default tablename generated by GORM
func (CreatorORM) TableName() string {
	return "creators"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Creator) ToORM(ctx context.Context) (CreatorORM, error) {
	to := CreatorORM{}
	var err error
	if prehook, ok := interface{}(m).(CreatorWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	for _, v := range m.Models {
		if v != nil {
			if tempModels, cErr := v.ToORM(ctx); cErr == nil {
				to.Models = append(to.Models, &tempModels)
			} else {
				return to, cErr
			}
		} else {
			to.Models = append(to.Models, nil)
		}
	}
	for _, v := range m.ModelParts {
		if v != nil {
			if tempModelParts, cErr := v.ToORM(ctx); cErr == nil {
				to.ModelParts = append(to.ModelParts, &tempModelParts)
			} else {
				return to, cErr
			}
		} else {
			to.ModelParts = append(to.ModelParts, nil)
		}
	}
	for _, v := range m.Links {
		if v != nil {
			if tempLinks, cErr := v.ToORM(ctx); cErr == nil {
				to.Links = append(to.Links, &tempLinks)
			} else {
				return to, cErr
			}
		} else {
			to.Links = append(to.Links, nil)
		}
	}
	if posthook, ok := interface{}(m).(CreatorWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CreatorORM) ToPB(ctx context.Context) (Creator, error) {
	to := Creator{}
	var err error
	if prehook, ok := interface{}(m).(CreatorWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	for _, v := range m.Models {
		if v != nil {
			if tempModels, cErr := v.ToPB(ctx); cErr == nil {
				to.Models = append(to.Models, &tempModels)
			} else {
				return to, cErr
			}
		} else {
			to.Models = append(to.Models, nil)
		}
	}
	for _, v := range m.ModelParts {
		if v != nil {
			if tempModelParts, cErr := v.ToPB(ctx); cErr == nil {
				to.ModelParts = append(to.ModelParts, &tempModelParts)
			} else {
				return to, cErr
			}
		} else {
			to.ModelParts = append(to.ModelParts, nil)
		}
	}
	for _, v := range m.Links {
		if v != nil {
			if tempLinks, cErr := v.ToPB(ctx); cErr == nil {
				to.Links = append(to.Links, &tempLinks)
			} else {
				return to, cErr
			}
		} else {
			to.Links = append(to.Links, nil)
		}
	}
	if posthook, ok := interface{}(m).(CreatorWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Creator the arg will be the target, the caller the one being converted from

// CreatorBeforeToORM called before default ToORM code
type CreatorWithBeforeToORM interface {
	BeforeToORM(context.Context, *CreatorORM) error
}

// CreatorAfterToORM called after default ToORM code
type CreatorWithAfterToORM interface {
	AfterToORM(context.Context, *CreatorORM) error
}

// CreatorBeforeToPB called before default ToPB code
type CreatorWithBeforeToPB interface {
	BeforeToPB(context.Context, *Creator) error
}

// CreatorAfterToPB called after default ToPB code
type CreatorWithAfterToPB interface {
	AfterToPB(context.Context, *Creator) error
}

type CreatorLinkORM struct {
	Creator   *CreatorORM `gorm:"foreignKey:CreatorLinkId;references:Id"`
	CreatorId *int32
	Id        int32
	Link      string
	Name      string
	Type      int32
}

// TableName overrides the default tablename generated by GORM
func (CreatorLinkORM) TableName() string {
	return "creator_links"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *CreatorLink) ToORM(ctx context.Context) (CreatorLinkORM, error) {
	to := CreatorLinkORM{}
	var err error
	if prehook, ok := interface{}(m).(CreatorLinkWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Link = m.Link
	if m.Creator != nil {
		tempCreator, err := m.Creator.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Creator = &tempCreator
	}
	to.Type = int32(m.Type)
	if posthook, ok := interface{}(m).(CreatorLinkWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CreatorLinkORM) ToPB(ctx context.Context) (CreatorLink, error) {
	to := CreatorLink{}
	var err error
	if prehook, ok := interface{}(m).(CreatorLinkWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Link = m.Link
	if m.Creator != nil {
		tempCreator, err := m.Creator.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Creator = &tempCreator
	}
	to.Type = CreatorLinkType(m.Type)
	if posthook, ok := interface{}(m).(CreatorLinkWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type CreatorLink the arg will be the target, the caller the one being converted from

// CreatorLinkBeforeToORM called before default ToORM code
type CreatorLinkWithBeforeToORM interface {
	BeforeToORM(context.Context, *CreatorLinkORM) error
}

// CreatorLinkAfterToORM called after default ToORM code
type CreatorLinkWithAfterToORM interface {
	AfterToORM(context.Context, *CreatorLinkORM) error
}

// CreatorLinkBeforeToPB called before default ToPB code
type CreatorLinkWithBeforeToPB interface {
	BeforeToPB(context.Context, *CreatorLink) error
}

// CreatorLinkAfterToPB called after default ToPB code
type CreatorLinkWithAfterToPB interface {
	AfterToPB(context.Context, *CreatorLink) error
}

type StorageORM struct {
	Credentials *StorageCredentialsORM `gorm:"foreignKey:StorageId;references:Id"`
	Description *string
	Id          int32
	Name        string
	Protocol    int32
}

// TableName overrides the default tablename generated by GORM
func (StorageORM) TableName() string {
	return "storages"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Storage) ToORM(ctx context.Context) (StorageORM, error) {
	to := StorageORM{}
	var err error
	if prehook, ok := interface{}(m).(StorageWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	to.Protocol = int32(m.Protocol)
	if m.Credentials != nil {
		tempCredentials, err := m.Credentials.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Credentials = &tempCredentials
	}
	if posthook, ok := interface{}(m).(StorageWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *StorageORM) ToPB(ctx context.Context) (Storage, error) {
	to := Storage{}
	var err error
	if prehook, ok := interface{}(m).(StorageWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	to.Protocol = StorageReferenceProtocol(m.Protocol)
	if m.Credentials != nil {
		tempCredentials, err := m.Credentials.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Credentials = &tempCredentials
	}
	if posthook, ok := interface{}(m).(StorageWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Storage the arg will be the target, the caller the one being converted from

// StorageBeforeToORM called before default ToORM code
type StorageWithBeforeToORM interface {
	BeforeToORM(context.Context, *StorageORM) error
}

// StorageAfterToORM called after default ToORM code
type StorageWithAfterToORM interface {
	AfterToORM(context.Context, *StorageORM) error
}

// StorageBeforeToPB called before default ToPB code
type StorageWithBeforeToPB interface {
	BeforeToPB(context.Context, *Storage) error
}

// StorageAfterToPB called after default ToPB code
type StorageWithAfterToPB interface {
	AfterToPB(context.Context, *Storage) error
}

type StorageCredentialsORM struct {
	Id        int32
	Password  *string
	StorageId *int32
	User      string
}

// TableName overrides the default tablename generated by GORM
func (StorageCredentialsORM) TableName() string {
	return "storage_credentials"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *StorageCredentials) ToORM(ctx context.Context) (StorageCredentialsORM, error) {
	to := StorageCredentialsORM{}
	var err error
	if prehook, ok := interface{}(m).(StorageCredentialsWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.User = m.User
	to.Password = m.Password
	if posthook, ok := interface{}(m).(StorageCredentialsWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *StorageCredentialsORM) ToPB(ctx context.Context) (StorageCredentials, error) {
	to := StorageCredentials{}
	var err error
	if prehook, ok := interface{}(m).(StorageCredentialsWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.User = m.User
	to.Password = m.Password
	if posthook, ok := interface{}(m).(StorageCredentialsWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type StorageCredentials the arg will be the target, the caller the one being converted from

// StorageCredentialsBeforeToORM called before default ToORM code
type StorageCredentialsWithBeforeToORM interface {
	BeforeToORM(context.Context, *StorageCredentialsORM) error
}

// StorageCredentialsAfterToORM called after default ToORM code
type StorageCredentialsWithAfterToORM interface {
	AfterToORM(context.Context, *StorageCredentialsORM) error
}

// StorageCredentialsBeforeToPB called before default ToPB code
type StorageCredentialsWithBeforeToPB interface {
	BeforeToPB(context.Context, *StorageCredentials) error
}

// StorageCredentialsAfterToPB called after default ToPB code
type StorageCredentialsWithAfterToPB interface {
	AfterToPB(context.Context, *StorageCredentials) error
}

// DefaultCreateModel executes a basic gorm create call
func DefaultCreateModel(ctx context.Context, in *Model, db *gorm.DB) (*Model, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ModelORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadModel(ctx context.Context, in *Model, db *gorm.DB) (*Model, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ModelORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ModelORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ModelORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteModel(ctx context.Context, in *Model, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ModelORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ModelORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteModelSet(ctx context.Context, in []*Model, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ModelORM{})).(ModelORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ModelORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ModelORM{})).(ModelORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ModelORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Model, *gorm.DB) (*gorm.DB, error)
}
type ModelORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Model, *gorm.DB) error
}

// DefaultStrictUpdateModel clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateModel(ctx context.Context, in *Model, db *gorm.DB) (*Model, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateModel")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ModelORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ModelORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterCreators := CreatorORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterCreators.ModelId = new(int32)
	*filterCreators.ModelId = ormObj.Id
	if err = db.Where(filterCreators).Delete(CreatorORM{}).Error; err != nil {
		return nil, err
	}
	filterModelParts := ModelPartORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterModelParts.ModelId = new(int32)
	*filterModelParts.ModelId = ormObj.Id
	if err = db.Where(filterModelParts).Delete(ModelPartORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ModelORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchModel executes a basic gorm update call with patch behavior
func DefaultPatchModel(ctx context.Context, in *Model, updateMask *field_mask.FieldMask, db *gorm.DB) (*Model, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Model
	var err error
	if hook, ok := interface{}(&pbObj).(ModelWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadModel(ctx, &Model{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ModelWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskModel(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ModelWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateModel(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ModelWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ModelWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Model, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ModelWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Model, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ModelWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Model, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ModelWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Model, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetModel executes a bulk gorm update call with patch behavior
func DefaultPatchSetModel(ctx context.Context, objects []*Model, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Model, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Model, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchModel(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskModel patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskModel(ctx context.Context, patchee *Model, patcher *Model, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Model, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"ModelParts" {
			patchee.ModelParts = patcher.ModelParts
			continue
		}
		if f == prefix+"Creators" {
			patchee.Creators = patcher.Creators
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListModel executes a gorm list call
func DefaultListModel(ctx context.Context, db *gorm.DB) ([]*Model, error) {
	in := Model{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ModelORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Model{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ModelORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ModelORM) error
}

// DefaultCreateModelPart executes a basic gorm create call
func DefaultCreateModelPart(ctx context.Context, in *ModelPart, db *gorm.DB) (*ModelPart, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ModelPartORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelPartORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadModelPart(ctx context.Context, in *ModelPart, db *gorm.DB) (*ModelPart, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ModelPartORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ModelPartORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ModelPartORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelPartORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelPartORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteModelPart(ctx context.Context, in *ModelPart, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ModelPartORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ModelPartORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelPartORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteModelPartSet(ctx context.Context, in []*ModelPart, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ModelPartORM{})).(ModelPartORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ModelPartORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ModelPartORM{})).(ModelPartORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ModelPartORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*ModelPart, *gorm.DB) (*gorm.DB, error)
}
type ModelPartORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*ModelPart, *gorm.DB) error
}

// DefaultStrictUpdateModelPart clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateModelPart(ctx context.Context, in *ModelPart, db *gorm.DB) (*ModelPart, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateModelPart")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ModelPartORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterCreators := CreatorORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterCreators.ModelPartId = new(int32)
	*filterCreators.ModelPartId = ormObj.Id
	if err = db.Where(filterCreators).Delete(CreatorORM{}).Error; err != nil {
		return nil, err
	}
	filterModels := ModelORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterModels.ModelPartId = new(int32)
	*filterModels.ModelPartId = ormObj.Id
	if err = db.Where(filterModels).Delete(ModelORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ModelPartORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelPartORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelPartORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchModelPart executes a basic gorm update call with patch behavior
func DefaultPatchModelPart(ctx context.Context, in *ModelPart, updateMask *field_mask.FieldMask, db *gorm.DB) (*ModelPart, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj ModelPart
	var err error
	if hook, ok := interface{}(&pbObj).(ModelPartWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadModelPart(ctx, &ModelPart{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ModelPartWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskModelPart(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ModelPartWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateModelPart(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ModelPartWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ModelPartWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *ModelPart, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ModelPartWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *ModelPart, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ModelPartWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *ModelPart, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ModelPartWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *ModelPart, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetModelPart executes a bulk gorm update call with patch behavior
func DefaultPatchSetModelPart(ctx context.Context, objects []*ModelPart, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*ModelPart, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*ModelPart, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchModelPart(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskModelPart patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskModelPart(ctx context.Context, patchee *ModelPart, patcher *ModelPart, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*ModelPart, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Models" {
			patchee.Models = patcher.Models
			continue
		}
		if f == prefix+"Creators" {
			patchee.Creators = patcher.Creators
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListModelPart executes a gorm list call
func DefaultListModelPart(ctx context.Context, db *gorm.DB) ([]*ModelPart, error) {
	in := ModelPart{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ModelPartORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ModelPartORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*ModelPart{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ModelPartORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelPartORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ModelPartORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ModelPartORM) error
}

// DefaultCreateCreator executes a basic gorm create call
func DefaultCreateCreator(ctx context.Context, in *Creator, db *gorm.DB) (*Creator, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CreatorORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadCreator(ctx context.Context, in *Creator, db *gorm.DB) (*Creator, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := CreatorORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(CreatorORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type CreatorORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteCreator(ctx context.Context, in *Creator, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&CreatorORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type CreatorORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteCreatorSet(ctx context.Context, in []*Creator, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&CreatorORM{})).(CreatorORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&CreatorORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&CreatorORM{})).(CreatorORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type CreatorORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Creator, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Creator, *gorm.DB) error
}

// DefaultStrictUpdateCreator clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateCreator(ctx context.Context, in *Creator, db *gorm.DB) (*Creator, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateCreator")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &CreatorORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterLinks := CreatorLinkORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterLinks.CreatorId = new(int32)
	*filterLinks.CreatorId = ormObj.Id
	if err = db.Where(filterLinks).Delete(CreatorLinkORM{}).Error; err != nil {
		return nil, err
	}
	filterModelParts := ModelPartORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterModelParts.CreatorId = new(int32)
	*filterModelParts.CreatorId = ormObj.Id
	if err = db.Where(filterModelParts).Delete(ModelPartORM{}).Error; err != nil {
		return nil, err
	}
	filterModels := ModelORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterModels.CreatorId = new(int32)
	*filterModels.CreatorId = ormObj.Id
	if err = db.Where(filterModels).Delete(ModelORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type CreatorORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchCreator executes a basic gorm update call with patch behavior
func DefaultPatchCreator(ctx context.Context, in *Creator, updateMask *field_mask.FieldMask, db *gorm.DB) (*Creator, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Creator
	var err error
	if hook, ok := interface{}(&pbObj).(CreatorWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadCreator(ctx, &Creator{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(CreatorWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskCreator(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(CreatorWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateCreator(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(CreatorWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type CreatorWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Creator, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Creator, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Creator, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Creator, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetCreator executes a bulk gorm update call with patch behavior
func DefaultPatchSetCreator(ctx context.Context, objects []*Creator, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Creator, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Creator, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchCreator(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskCreator patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCreator(ctx context.Context, patchee *Creator, patcher *Creator, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Creator, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Models" {
			patchee.Models = patcher.Models
			continue
		}
		if f == prefix+"ModelParts" {
			patchee.ModelParts = patcher.ModelParts
			continue
		}
		if f == prefix+"Links" {
			patchee.Links = patcher.Links
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCreator executes a gorm list call
func DefaultListCreator(ctx context.Context, db *gorm.DB) ([]*Creator, error) {
	in := Creator{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []CreatorORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Creator{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CreatorORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]CreatorORM) error
}

// DefaultCreateCreatorLink executes a basic gorm create call
func DefaultCreateCreatorLink(ctx context.Context, in *CreatorLink, db *gorm.DB) (*CreatorLink, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CreatorLinkORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadCreatorLink(ctx context.Context, in *CreatorLink, db *gorm.DB) (*CreatorLink, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := CreatorLinkORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(CreatorLinkORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type CreatorLinkORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteCreatorLink(ctx context.Context, in *CreatorLink, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&CreatorLinkORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type CreatorLinkORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteCreatorLinkSet(ctx context.Context, in []*CreatorLink, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&CreatorLinkORM{})).(CreatorLinkORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&CreatorLinkORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&CreatorLinkORM{})).(CreatorLinkORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type CreatorLinkORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*CreatorLink, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*CreatorLink, *gorm.DB) error
}

// DefaultStrictUpdateCreatorLink clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateCreatorLink(ctx context.Context, in *CreatorLink, db *gorm.DB) (*CreatorLink, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateCreatorLink")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &CreatorLinkORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterCreator := CreatorORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterCreator.CreatorLinkId = new(int32)
	*filterCreator.CreatorLinkId = ormObj.Id
	if err = db.Where(filterCreator).Delete(CreatorORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type CreatorLinkORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchCreatorLink executes a basic gorm update call with patch behavior
func DefaultPatchCreatorLink(ctx context.Context, in *CreatorLink, updateMask *field_mask.FieldMask, db *gorm.DB) (*CreatorLink, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj CreatorLink
	var err error
	if hook, ok := interface{}(&pbObj).(CreatorLinkWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadCreatorLink(ctx, &CreatorLink{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(CreatorLinkWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskCreatorLink(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(CreatorLinkWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateCreatorLink(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(CreatorLinkWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type CreatorLinkWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *CreatorLink, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *CreatorLink, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *CreatorLink, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *CreatorLink, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetCreatorLink executes a bulk gorm update call with patch behavior
func DefaultPatchSetCreatorLink(ctx context.Context, objects []*CreatorLink, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*CreatorLink, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*CreatorLink, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchCreatorLink(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskCreatorLink patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCreatorLink(ctx context.Context, patchee *CreatorLink, patcher *CreatorLink, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*CreatorLink, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreator bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Link" {
			patchee.Link = patcher.Link
			continue
		}
		if !updatedCreator && strings.HasPrefix(f, prefix+"Creator.") {
			updatedCreator = true
			if patcher.Creator == nil {
				patchee.Creator = nil
				continue
			}
			if patchee.Creator == nil {
				patchee.Creator = &Creator{}
			}
			if o, err := DefaultApplyFieldMaskCreator(ctx, patchee.Creator, patcher.Creator, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Creator.", db); err != nil {
				return nil, err
			} else {
				patchee.Creator = o
			}
			continue
		}
		if f == prefix+"Creator" {
			updatedCreator = true
			patchee.Creator = patcher.Creator
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCreatorLink executes a gorm list call
func DefaultListCreatorLink(ctx context.Context, db *gorm.DB) ([]*CreatorLink, error) {
	in := CreatorLink{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []CreatorLinkORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*CreatorLink{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CreatorLinkORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]CreatorLinkORM) error
}

// DefaultCreateStorage executes a basic gorm create call
func DefaultCreateStorage(ctx context.Context, in *Storage, db *gorm.DB) (*Storage, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type StorageORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadStorage(ctx context.Context, in *Storage, db *gorm.DB) (*Storage, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := StorageORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(StorageORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type StorageORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteStorage(ctx context.Context, in *Storage, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&StorageORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type StorageORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteStorageSet(ctx context.Context, in []*Storage, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&StorageORM{})).(StorageORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&StorageORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&StorageORM{})).(StorageORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type StorageORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Storage, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Storage, *gorm.DB) error
}

// DefaultStrictUpdateStorage clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateStorage(ctx context.Context, in *Storage, db *gorm.DB) (*Storage, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateStorage")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &StorageORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterCredentials := StorageCredentialsORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterCredentials.StorageId = new(int32)
	*filterCredentials.StorageId = ormObj.Id
	if err = db.Where(filterCredentials).Delete(StorageCredentialsORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type StorageORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchStorage executes a basic gorm update call with patch behavior
func DefaultPatchStorage(ctx context.Context, in *Storage, updateMask *field_mask.FieldMask, db *gorm.DB) (*Storage, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Storage
	var err error
	if hook, ok := interface{}(&pbObj).(StorageWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadStorage(ctx, &Storage{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(StorageWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskStorage(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(StorageWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateStorage(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(StorageWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type StorageWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Storage, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Storage, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Storage, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Storage, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetStorage executes a bulk gorm update call with patch behavior
func DefaultPatchSetStorage(ctx context.Context, objects []*Storage, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Storage, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Storage, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchStorage(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskStorage patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskStorage(ctx context.Context, patchee *Storage, patcher *Storage, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Storage, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCredentials bool
	var updatedLocation bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Protocol" {
			patchee.Protocol = patcher.Protocol
			continue
		}
		if !updatedCredentials && strings.HasPrefix(f, prefix+"Credentials.") {
			updatedCredentials = true
			if patcher.Credentials == nil {
				patchee.Credentials = nil
				continue
			}
			if patchee.Credentials == nil {
				patchee.Credentials = &StorageCredentials{}
			}
			if o, err := DefaultApplyFieldMaskStorageCredentials(ctx, patchee.Credentials, patcher.Credentials, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Credentials.", db); err != nil {
				return nil, err
			} else {
				patchee.Credentials = o
			}
			continue
		}
		if f == prefix+"Credentials" {
			updatedCredentials = true
			patchee.Credentials = patcher.Credentials
			continue
		}
		if !updatedLocation && strings.HasPrefix(f, prefix+"Location.") {
			if patcher.Location == nil {
				patchee.Location = nil
				continue
			}
			if patchee.Location == nil {
				patchee.Location = &StorageLocation{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Location."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Location, patchee.Location, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Location" {
			updatedLocation = true
			patchee.Location = patcher.Location
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListStorage executes a gorm list call
func DefaultListStorage(ctx context.Context, db *gorm.DB) ([]*Storage, error) {
	in := Storage{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []StorageORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Storage{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type StorageORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]StorageORM) error
}

// DefaultCreateStorageCredentials executes a basic gorm create call
func DefaultCreateStorageCredentials(ctx context.Context, in *StorageCredentials, db *gorm.DB) (*StorageCredentials, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type StorageCredentialsORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadStorageCredentials(ctx context.Context, in *StorageCredentials, db *gorm.DB) (*StorageCredentials, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := StorageCredentialsORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(StorageCredentialsORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type StorageCredentialsORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteStorageCredentials(ctx context.Context, in *StorageCredentials, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&StorageCredentialsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type StorageCredentialsORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteStorageCredentialsSet(ctx context.Context, in []*StorageCredentials, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&StorageCredentialsORM{})).(StorageCredentialsORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&StorageCredentialsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&StorageCredentialsORM{})).(StorageCredentialsORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type StorageCredentialsORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*StorageCredentials, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*StorageCredentials, *gorm.DB) error
}

// DefaultStrictUpdateStorageCredentials clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateStorageCredentials(ctx context.Context, in *StorageCredentials, db *gorm.DB) (*StorageCredentials, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateStorageCredentials")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &StorageCredentialsORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type StorageCredentialsORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchStorageCredentials executes a basic gorm update call with patch behavior
func DefaultPatchStorageCredentials(ctx context.Context, in *StorageCredentials, updateMask *field_mask.FieldMask, db *gorm.DB) (*StorageCredentials, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj StorageCredentials
	var err error
	if hook, ok := interface{}(&pbObj).(StorageCredentialsWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadStorageCredentials(ctx, &StorageCredentials{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(StorageCredentialsWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskStorageCredentials(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(StorageCredentialsWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateStorageCredentials(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(StorageCredentialsWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type StorageCredentialsWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *StorageCredentials, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *StorageCredentials, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *StorageCredentials, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *StorageCredentials, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetStorageCredentials executes a bulk gorm update call with patch behavior
func DefaultPatchSetStorageCredentials(ctx context.Context, objects []*StorageCredentials, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*StorageCredentials, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*StorageCredentials, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchStorageCredentials(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskStorageCredentials patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskStorageCredentials(ctx context.Context, patchee *StorageCredentials, patcher *StorageCredentials, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*StorageCredentials, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"User" {
			patchee.User = patcher.User
			continue
		}
		if f == prefix+"Password" {
			patchee.Password = patcher.Password
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListStorageCredentials executes a gorm list call
func DefaultListStorageCredentials(ctx context.Context, db *gorm.DB) ([]*StorageCredentials, error) {
	in := StorageCredentials{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []StorageCredentialsORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*StorageCredentials{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type StorageCredentialsORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]StorageCredentialsORM) error
}
