package proto

import (
	context "context"
	fmt "fmt"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	gorm "gorm.io/gorm"
	strings "strings"
)

type RoomORM struct {
	Building    *BuildingORM `gorm:"foreignKey:RoomId;references:Id"`
	Description *string
	Id          int32
	Name        string
}

// TableName overrides the default tablename generated by GORM
func (RoomORM) TableName() string {
	return "rooms"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Room) ToORM(ctx context.Context) (RoomORM, error) {
	to := RoomORM{}
	var err error
	if prehook, ok := interface{}(m).(RoomWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	if m.Building != nil {
		tempBuilding, err := m.Building.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Building = &tempBuilding
	}
	// Repeated type Tag is not an ORMable message type
	if posthook, ok := interface{}(m).(RoomWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RoomORM) ToPB(ctx context.Context) (Room, error) {
	to := Room{}
	var err error
	if prehook, ok := interface{}(m).(RoomWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	if m.Building != nil {
		tempBuilding, err := m.Building.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Building = &tempBuilding
	}
	// Repeated type Tag is not an ORMable message type
	if posthook, ok := interface{}(m).(RoomWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Room the arg will be the target, the caller the one being converted from

// RoomBeforeToORM called before default ToORM code
type RoomWithBeforeToORM interface {
	BeforeToORM(context.Context, *RoomORM) error
}

// RoomAfterToORM called after default ToORM code
type RoomWithAfterToORM interface {
	AfterToORM(context.Context, *RoomORM) error
}

// RoomBeforeToPB called before default ToPB code
type RoomWithBeforeToPB interface {
	BeforeToPB(context.Context, *Room) error
}

// RoomAfterToPB called after default ToPB code
type RoomWithAfterToPB interface {
	AfterToPB(context.Context, *Room) error
}

type BuildingORM struct {
	Description *string
	Id          int32
	Name        string
	RoomId      *int32
}

// TableName overrides the default tablename generated by GORM
func (BuildingORM) TableName() string {
	return "buildings"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Building) ToORM(ctx context.Context) (BuildingORM, error) {
	to := BuildingORM{}
	var err error
	if prehook, ok := interface{}(m).(BuildingWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	// Repeated type Tag is not an ORMable message type
	if posthook, ok := interface{}(m).(BuildingWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *BuildingORM) ToPB(ctx context.Context) (Building, error) {
	to := Building{}
	var err error
	if prehook, ok := interface{}(m).(BuildingWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	// Repeated type Tag is not an ORMable message type
	if posthook, ok := interface{}(m).(BuildingWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Building the arg will be the target, the caller the one being converted from

// BuildingBeforeToORM called before default ToORM code
type BuildingWithBeforeToORM interface {
	BeforeToORM(context.Context, *BuildingORM) error
}

// BuildingAfterToORM called after default ToORM code
type BuildingWithAfterToORM interface {
	AfterToORM(context.Context, *BuildingORM) error
}

// BuildingBeforeToPB called before default ToPB code
type BuildingWithBeforeToPB interface {
	BeforeToPB(context.Context, *Building) error
}

// BuildingAfterToPB called after default ToPB code
type BuildingWithAfterToPB interface {
	AfterToPB(context.Context, *Building) error
}

// DefaultCreateRoom executes a basic gorm create call
func DefaultCreateRoom(ctx context.Context, in *Room, db *gorm.DB) (*Room, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type RoomORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoomORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadRoom(ctx context.Context, in *Room, db *gorm.DB) (*Room, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := RoomORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(RoomORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type RoomORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoomORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoomORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteRoom(ctx context.Context, in *Room, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&RoomORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type RoomORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoomORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteRoomSet(ctx context.Context, in []*Room, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&RoomORM{})).(RoomORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&RoomORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&RoomORM{})).(RoomORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type RoomORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Room, *gorm.DB) (*gorm.DB, error)
}
type RoomORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Room, *gorm.DB) error
}

// DefaultStrictUpdateRoom clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateRoom(ctx context.Context, in *Room, db *gorm.DB) (*Room, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateRoom")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &RoomORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(RoomORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterBuilding := BuildingORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterBuilding.RoomId = new(int32)
	*filterBuilding.RoomId = ormObj.Id
	if err = db.Where(filterBuilding).Delete(BuildingORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type RoomORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoomORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoomORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchRoom executes a basic gorm update call with patch behavior
func DefaultPatchRoom(ctx context.Context, in *Room, updateMask *field_mask.FieldMask, db *gorm.DB) (*Room, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Room
	var err error
	if hook, ok := interface{}(&pbObj).(RoomWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadRoom(ctx, &Room{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(RoomWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskRoom(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(RoomWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateRoom(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(RoomWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type RoomWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Room, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoomWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Room, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoomWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Room, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type RoomWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Room, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetRoom executes a bulk gorm update call with patch behavior
func DefaultPatchSetRoom(ctx context.Context, objects []*Room, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Room, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Room, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchRoom(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskRoom patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskRoom(ctx context.Context, patchee *Room, patcher *Room, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Room, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedBuilding bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if !updatedBuilding && strings.HasPrefix(f, prefix+"Building.") {
			updatedBuilding = true
			if patcher.Building == nil {
				patchee.Building = nil
				continue
			}
			if patchee.Building == nil {
				patchee.Building = &Building{}
			}
			if o, err := DefaultApplyFieldMaskBuilding(ctx, patchee.Building, patcher.Building, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Building.", db); err != nil {
				return nil, err
			} else {
				patchee.Building = o
			}
			continue
		}
		if f == prefix+"Building" {
			updatedBuilding = true
			patchee.Building = patcher.Building
			continue
		}
		if f == prefix+"Tags" {
			patchee.Tags = patcher.Tags
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListRoom executes a gorm list call
func DefaultListRoom(ctx context.Context, db *gorm.DB) ([]*Room, error) {
	in := Room{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []RoomORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RoomORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Room{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type RoomORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoomORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RoomORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]RoomORM) error
}

// DefaultCreateBuilding executes a basic gorm create call
func DefaultCreateBuilding(ctx context.Context, in *Building, db *gorm.DB) (*Building, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type BuildingORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BuildingORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadBuilding(ctx context.Context, in *Building, db *gorm.DB) (*Building, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := BuildingORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(BuildingORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type BuildingORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BuildingORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BuildingORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteBuilding(ctx context.Context, in *Building, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&BuildingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type BuildingORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BuildingORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteBuildingSet(ctx context.Context, in []*Building, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&BuildingORM{})).(BuildingORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&BuildingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&BuildingORM{})).(BuildingORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type BuildingORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Building, *gorm.DB) (*gorm.DB, error)
}
type BuildingORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Building, *gorm.DB) error
}

// DefaultStrictUpdateBuilding clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateBuilding(ctx context.Context, in *Building, db *gorm.DB) (*Building, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateBuilding")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &BuildingORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(BuildingORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type BuildingORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BuildingORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BuildingORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchBuilding executes a basic gorm update call with patch behavior
func DefaultPatchBuilding(ctx context.Context, in *Building, updateMask *field_mask.FieldMask, db *gorm.DB) (*Building, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Building
	var err error
	if hook, ok := interface{}(&pbObj).(BuildingWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadBuilding(ctx, &Building{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(BuildingWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskBuilding(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(BuildingWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateBuilding(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(BuildingWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type BuildingWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Building, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type BuildingWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Building, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type BuildingWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Building, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type BuildingWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Building, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetBuilding executes a bulk gorm update call with patch behavior
func DefaultPatchSetBuilding(ctx context.Context, objects []*Building, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Building, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Building, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchBuilding(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskBuilding patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskBuilding(ctx context.Context, patchee *Building, patcher *Building, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Building, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Tags" {
			patchee.Tags = patcher.Tags
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListBuilding executes a gorm list call
func DefaultListBuilding(ctx context.Context, db *gorm.DB) ([]*Building, error) {
	in := Building{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []BuildingORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BuildingORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Building{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type BuildingORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BuildingORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type BuildingORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]BuildingORM) error
}
