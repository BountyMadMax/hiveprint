package proto

import (
	context "context"
	fmt "fmt"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	gorm "gorm.io/gorm"
	strings "strings"
)

type StorageORM struct {
	Credentials  *StorageCredentialsORM `gorm:"foreignKey:StorageId;references:Id"`
	Description  *string
	Id           int32
	Location     string
	LocationType int32
	Name         string
	Protocol     int32
}

// TableName overrides the default tablename generated by GORM
func (StorageORM) TableName() string {
	return "storages"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Storage) ToORM(ctx context.Context) (StorageORM, error) {
	to := StorageORM{}
	var err error
	if prehook, ok := interface{}(m).(StorageWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	to.Protocol = int32(m.Protocol)
	if m.Credentials != nil {
		tempCredentials, err := m.Credentials.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Credentials = &tempCredentials
	}
	to.Location = m.Location
	to.LocationType = int32(m.LocationType)
	// Repeated type Tag is not an ORMable message type
	if posthook, ok := interface{}(m).(StorageWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *StorageORM) ToPB(ctx context.Context) (Storage, error) {
	to := Storage{}
	var err error
	if prehook, ok := interface{}(m).(StorageWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	to.Protocol = StorageProtocol(m.Protocol)
	if m.Credentials != nil {
		tempCredentials, err := m.Credentials.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Credentials = &tempCredentials
	}
	to.Location = m.Location
	to.LocationType = StorageLocationType(m.LocationType)
	// Repeated type Tag is not an ORMable message type
	if posthook, ok := interface{}(m).(StorageWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Storage the arg will be the target, the caller the one being converted from

// StorageBeforeToORM called before default ToORM code
type StorageWithBeforeToORM interface {
	BeforeToORM(context.Context, *StorageORM) error
}

// StorageAfterToORM called after default ToORM code
type StorageWithAfterToORM interface {
	AfterToORM(context.Context, *StorageORM) error
}

// StorageBeforeToPB called before default ToPB code
type StorageWithBeforeToPB interface {
	BeforeToPB(context.Context, *Storage) error
}

// StorageAfterToPB called after default ToPB code
type StorageWithAfterToPB interface {
	AfterToPB(context.Context, *Storage) error
}

type StorageCredentialsORM struct {
	Id        int32
	Password  string
	StorageId *int32
	Username  string
}

// TableName overrides the default tablename generated by GORM
func (StorageCredentialsORM) TableName() string {
	return "storage_credentials"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *StorageCredentials) ToORM(ctx context.Context) (StorageCredentialsORM, error) {
	to := StorageCredentialsORM{}
	var err error
	if prehook, ok := interface{}(m).(StorageCredentialsWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Username = m.Username
	to.Password = m.Password
	if posthook, ok := interface{}(m).(StorageCredentialsWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *StorageCredentialsORM) ToPB(ctx context.Context) (StorageCredentials, error) {
	to := StorageCredentials{}
	var err error
	if prehook, ok := interface{}(m).(StorageCredentialsWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Username = m.Username
	to.Password = m.Password
	if posthook, ok := interface{}(m).(StorageCredentialsWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type StorageCredentials the arg will be the target, the caller the one being converted from

// StorageCredentialsBeforeToORM called before default ToORM code
type StorageCredentialsWithBeforeToORM interface {
	BeforeToORM(context.Context, *StorageCredentialsORM) error
}

// StorageCredentialsAfterToORM called after default ToORM code
type StorageCredentialsWithAfterToORM interface {
	AfterToORM(context.Context, *StorageCredentialsORM) error
}

// StorageCredentialsBeforeToPB called before default ToPB code
type StorageCredentialsWithBeforeToPB interface {
	BeforeToPB(context.Context, *StorageCredentials) error
}

// StorageCredentialsAfterToPB called after default ToPB code
type StorageCredentialsWithAfterToPB interface {
	AfterToPB(context.Context, *StorageCredentials) error
}

// DefaultCreateStorage executes a basic gorm create call
func DefaultCreateStorage(ctx context.Context, in *Storage, db *gorm.DB) (*Storage, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type StorageORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadStorage(ctx context.Context, in *Storage, db *gorm.DB) (*Storage, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := StorageORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(StorageORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type StorageORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteStorage(ctx context.Context, in *Storage, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&StorageORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type StorageORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteStorageSet(ctx context.Context, in []*Storage, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&StorageORM{})).(StorageORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&StorageORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&StorageORM{})).(StorageORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type StorageORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Storage, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Storage, *gorm.DB) error
}

// DefaultStrictUpdateStorage clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateStorage(ctx context.Context, in *Storage, db *gorm.DB) (*Storage, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateStorage")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &StorageORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterCredentials := StorageCredentialsORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterCredentials.StorageId = new(int32)
	*filterCredentials.StorageId = ormObj.Id
	if err = db.Where(filterCredentials).Delete(StorageCredentialsORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type StorageORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchStorage executes a basic gorm update call with patch behavior
func DefaultPatchStorage(ctx context.Context, in *Storage, updateMask *field_mask.FieldMask, db *gorm.DB) (*Storage, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Storage
	var err error
	if hook, ok := interface{}(&pbObj).(StorageWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadStorage(ctx, &Storage{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(StorageWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskStorage(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(StorageWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateStorage(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(StorageWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type StorageWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Storage, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Storage, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Storage, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Storage, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetStorage executes a bulk gorm update call with patch behavior
func DefaultPatchSetStorage(ctx context.Context, objects []*Storage, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Storage, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Storage, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchStorage(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskStorage patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskStorage(ctx context.Context, patchee *Storage, patcher *Storage, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Storage, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCredentials bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Protocol" {
			patchee.Protocol = patcher.Protocol
			continue
		}
		if !updatedCredentials && strings.HasPrefix(f, prefix+"Credentials.") {
			updatedCredentials = true
			if patcher.Credentials == nil {
				patchee.Credentials = nil
				continue
			}
			if patchee.Credentials == nil {
				patchee.Credentials = &StorageCredentials{}
			}
			if o, err := DefaultApplyFieldMaskStorageCredentials(ctx, patchee.Credentials, patcher.Credentials, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Credentials.", db); err != nil {
				return nil, err
			} else {
				patchee.Credentials = o
			}
			continue
		}
		if f == prefix+"Credentials" {
			updatedCredentials = true
			patchee.Credentials = patcher.Credentials
			continue
		}
		if f == prefix+"Location" {
			patchee.Location = patcher.Location
			continue
		}
		if f == prefix+"LocationType" {
			patchee.LocationType = patcher.LocationType
			continue
		}
		if f == prefix+"Tags" {
			patchee.Tags = patcher.Tags
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListStorage executes a gorm list call
func DefaultListStorage(ctx context.Context, db *gorm.DB) ([]*Storage, error) {
	in := Storage{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []StorageORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Storage{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type StorageORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]StorageORM) error
}

// DefaultCreateStorageCredentials executes a basic gorm create call
func DefaultCreateStorageCredentials(ctx context.Context, in *StorageCredentials, db *gorm.DB) (*StorageCredentials, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type StorageCredentialsORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadStorageCredentials(ctx context.Context, in *StorageCredentials, db *gorm.DB) (*StorageCredentials, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := StorageCredentialsORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(StorageCredentialsORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type StorageCredentialsORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteStorageCredentials(ctx context.Context, in *StorageCredentials, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&StorageCredentialsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type StorageCredentialsORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteStorageCredentialsSet(ctx context.Context, in []*StorageCredentials, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&StorageCredentialsORM{})).(StorageCredentialsORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&StorageCredentialsORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&StorageCredentialsORM{})).(StorageCredentialsORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type StorageCredentialsORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*StorageCredentials, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*StorageCredentials, *gorm.DB) error
}

// DefaultStrictUpdateStorageCredentials clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateStorageCredentials(ctx context.Context, in *StorageCredentials, db *gorm.DB) (*StorageCredentials, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateStorageCredentials")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &StorageCredentialsORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type StorageCredentialsORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchStorageCredentials executes a basic gorm update call with patch behavior
func DefaultPatchStorageCredentials(ctx context.Context, in *StorageCredentials, updateMask *field_mask.FieldMask, db *gorm.DB) (*StorageCredentials, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj StorageCredentials
	var err error
	if hook, ok := interface{}(&pbObj).(StorageCredentialsWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadStorageCredentials(ctx, &StorageCredentials{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(StorageCredentialsWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskStorageCredentials(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(StorageCredentialsWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateStorageCredentials(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(StorageCredentialsWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type StorageCredentialsWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *StorageCredentials, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *StorageCredentials, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *StorageCredentials, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *StorageCredentials, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetStorageCredentials executes a bulk gorm update call with patch behavior
func DefaultPatchSetStorageCredentials(ctx context.Context, objects []*StorageCredentials, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*StorageCredentials, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*StorageCredentials, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchStorageCredentials(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskStorageCredentials patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskStorageCredentials(ctx context.Context, patchee *StorageCredentials, patcher *StorageCredentials, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*StorageCredentials, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Username" {
			patchee.Username = patcher.Username
			continue
		}
		if f == prefix+"Password" {
			patchee.Password = patcher.Password
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListStorageCredentials executes a gorm list call
func DefaultListStorageCredentials(ctx context.Context, db *gorm.DB) ([]*StorageCredentials, error) {
	in := StorageCredentials{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []StorageCredentialsORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(StorageCredentialsORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*StorageCredentials{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type StorageCredentialsORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type StorageCredentialsORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]StorageCredentialsORM) error
}
