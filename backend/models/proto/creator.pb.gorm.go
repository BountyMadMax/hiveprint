package proto

import (
	context "context"
	fmt "fmt"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	gorm "gorm.io/gorm"
)

type CreatorORM struct {
	CreatorLinkId *int32
	Description   *string
	Id            int32
	Links         []*CreatorLinkORM `gorm:"foreignKey:CreatorId;references:Id"`
	ModelId       *int32
	ModelPartId   *int32
	ModelParts    []*ModelPartORM `gorm:"foreignKey:CreatorId;references:Id"`
	Models        []*ModelORM     `gorm:"foreignKey:CreatorId;references:Id"`
	Name          string
}

// TableName overrides the default tablename generated by GORM
func (CreatorORM) TableName() string {
	return "creators"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Creator) ToORM(ctx context.Context) (CreatorORM, error) {
	to := CreatorORM{}
	var err error
	if prehook, ok := interface{}(m).(CreatorWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	for _, v := range m.Links {
		if v != nil {
			if tempLinks, cErr := v.ToORM(ctx); cErr == nil {
				to.Links = append(to.Links, &tempLinks)
			} else {
				return to, cErr
			}
		} else {
			to.Links = append(to.Links, nil)
		}
	}
	// Repeated type Tag is not an ORMable message type
	if posthook, ok := interface{}(m).(CreatorWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CreatorORM) ToPB(ctx context.Context) (Creator, error) {
	to := Creator{}
	var err error
	if prehook, ok := interface{}(m).(CreatorWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	for _, v := range m.Links {
		if v != nil {
			if tempLinks, cErr := v.ToPB(ctx); cErr == nil {
				to.Links = append(to.Links, &tempLinks)
			} else {
				return to, cErr
			}
		} else {
			to.Links = append(to.Links, nil)
		}
	}
	// Repeated type Tag is not an ORMable message type
	if posthook, ok := interface{}(m).(CreatorWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Creator the arg will be the target, the caller the one being converted from

// CreatorBeforeToORM called before default ToORM code
type CreatorWithBeforeToORM interface {
	BeforeToORM(context.Context, *CreatorORM) error
}

// CreatorAfterToORM called after default ToORM code
type CreatorWithAfterToORM interface {
	AfterToORM(context.Context, *CreatorORM) error
}

// CreatorBeforeToPB called before default ToPB code
type CreatorWithBeforeToPB interface {
	BeforeToPB(context.Context, *Creator) error
}

// CreatorAfterToPB called after default ToPB code
type CreatorWithAfterToPB interface {
	AfterToPB(context.Context, *Creator) error
}

type CreatorLinkORM struct {
	Creator   *CreatorORM `gorm:"foreignKey:CreatorLinkId;references:Id"`
	CreatorId *int32
	Id        int32
	Link      string
	Name      string
	Type      int32
}

// TableName overrides the default tablename generated by GORM
func (CreatorLinkORM) TableName() string {
	return "creator_links"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *CreatorLink) ToORM(ctx context.Context) (CreatorLinkORM, error) {
	to := CreatorLinkORM{}
	var err error
	if prehook, ok := interface{}(m).(CreatorLinkWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Link = m.Link
	to.Type = int32(m.Type)
	if posthook, ok := interface{}(m).(CreatorLinkWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CreatorLinkORM) ToPB(ctx context.Context) (CreatorLink, error) {
	to := CreatorLink{}
	var err error
	if prehook, ok := interface{}(m).(CreatorLinkWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Link = m.Link
	to.Type = CreatorLinkType(m.Type)
	if posthook, ok := interface{}(m).(CreatorLinkWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type CreatorLink the arg will be the target, the caller the one being converted from

// CreatorLinkBeforeToORM called before default ToORM code
type CreatorLinkWithBeforeToORM interface {
	BeforeToORM(context.Context, *CreatorLinkORM) error
}

// CreatorLinkAfterToORM called after default ToORM code
type CreatorLinkWithAfterToORM interface {
	AfterToORM(context.Context, *CreatorLinkORM) error
}

// CreatorLinkBeforeToPB called before default ToPB code
type CreatorLinkWithBeforeToPB interface {
	BeforeToPB(context.Context, *CreatorLink) error
}

// CreatorLinkAfterToPB called after default ToPB code
type CreatorLinkWithAfterToPB interface {
	AfterToPB(context.Context, *CreatorLink) error
}

// DefaultCreateCreator executes a basic gorm create call
func DefaultCreateCreator(ctx context.Context, in *Creator, db *gorm.DB) (*Creator, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CreatorORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadCreator(ctx context.Context, in *Creator, db *gorm.DB) (*Creator, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := CreatorORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(CreatorORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type CreatorORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteCreator(ctx context.Context, in *Creator, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&CreatorORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type CreatorORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteCreatorSet(ctx context.Context, in []*Creator, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&CreatorORM{})).(CreatorORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&CreatorORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&CreatorORM{})).(CreatorORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type CreatorORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Creator, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Creator, *gorm.DB) error
}

// DefaultStrictUpdateCreator clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateCreator(ctx context.Context, in *Creator, db *gorm.DB) (*Creator, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateCreator")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &CreatorORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterLinks := CreatorLinkORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterLinks.CreatorId = new(int32)
	*filterLinks.CreatorId = ormObj.Id
	if err = db.Where(filterLinks).Delete(CreatorLinkORM{}).Error; err != nil {
		return nil, err
	}
	filterModelParts := ModelPartORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterModelParts.CreatorId = new(int32)
	*filterModelParts.CreatorId = ormObj.Id
	if err = db.Where(filterModelParts).Delete(ModelPartORM{}).Error; err != nil {
		return nil, err
	}
	filterModels := ModelORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterModels.CreatorId = new(int32)
	*filterModels.CreatorId = ormObj.Id
	if err = db.Where(filterModels).Delete(ModelORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type CreatorORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchCreator executes a basic gorm update call with patch behavior
func DefaultPatchCreator(ctx context.Context, in *Creator, updateMask *field_mask.FieldMask, db *gorm.DB) (*Creator, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Creator
	var err error
	if hook, ok := interface{}(&pbObj).(CreatorWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadCreator(ctx, &Creator{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(CreatorWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskCreator(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(CreatorWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateCreator(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(CreatorWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type CreatorWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Creator, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Creator, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Creator, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Creator, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetCreator executes a bulk gorm update call with patch behavior
func DefaultPatchSetCreator(ctx context.Context, objects []*Creator, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Creator, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Creator, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchCreator(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskCreator patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCreator(ctx context.Context, patchee *Creator, patcher *Creator, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Creator, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Links" {
			patchee.Links = patcher.Links
			continue
		}
		if f == prefix+"Tags" {
			patchee.Tags = patcher.Tags
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCreator executes a gorm list call
func DefaultListCreator(ctx context.Context, db *gorm.DB) ([]*Creator, error) {
	in := Creator{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []CreatorORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Creator{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CreatorORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]CreatorORM) error
}

// DefaultCreateCreatorLink executes a basic gorm create call
func DefaultCreateCreatorLink(ctx context.Context, in *CreatorLink, db *gorm.DB) (*CreatorLink, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CreatorLinkORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadCreatorLink(ctx context.Context, in *CreatorLink, db *gorm.DB) (*CreatorLink, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := CreatorLinkORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(CreatorLinkORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type CreatorLinkORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteCreatorLink(ctx context.Context, in *CreatorLink, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&CreatorLinkORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type CreatorLinkORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteCreatorLinkSet(ctx context.Context, in []*CreatorLink, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&CreatorLinkORM{})).(CreatorLinkORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&CreatorLinkORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&CreatorLinkORM{})).(CreatorLinkORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type CreatorLinkORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*CreatorLink, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*CreatorLink, *gorm.DB) error
}

// DefaultStrictUpdateCreatorLink clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateCreatorLink(ctx context.Context, in *CreatorLink, db *gorm.DB) (*CreatorLink, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateCreatorLink")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &CreatorLinkORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterCreator := CreatorORM{}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	filterCreator.CreatorLinkId = new(int32)
	*filterCreator.CreatorLinkId = ormObj.Id
	if err = db.Where(filterCreator).Delete(CreatorORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type CreatorLinkORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchCreatorLink executes a basic gorm update call with patch behavior
func DefaultPatchCreatorLink(ctx context.Context, in *CreatorLink, updateMask *field_mask.FieldMask, db *gorm.DB) (*CreatorLink, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj CreatorLink
	var err error
	if hook, ok := interface{}(&pbObj).(CreatorLinkWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadCreatorLink(ctx, &CreatorLink{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(CreatorLinkWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskCreatorLink(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(CreatorLinkWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateCreatorLink(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(CreatorLinkWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type CreatorLinkWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *CreatorLink, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *CreatorLink, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *CreatorLink, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *CreatorLink, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetCreatorLink executes a bulk gorm update call with patch behavior
func DefaultPatchSetCreatorLink(ctx context.Context, objects []*CreatorLink, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*CreatorLink, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*CreatorLink, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchCreatorLink(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskCreatorLink patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCreatorLink(ctx context.Context, patchee *CreatorLink, patcher *CreatorLink, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*CreatorLink, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Link" {
			patchee.Link = patcher.Link
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCreatorLink executes a gorm list call
func DefaultListCreatorLink(ctx context.Context, db *gorm.DB) ([]*CreatorLink, error) {
	in := CreatorLink{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []CreatorLinkORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CreatorLinkORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*CreatorLink{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CreatorLinkORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CreatorLinkORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]CreatorLinkORM) error
}
