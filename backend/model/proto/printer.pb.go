// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: printer.proto

package proto

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "models/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrinterModelType int32

const (
	PrinterModelType_OTHER PrinterModelType = 0
	PrinterModelType_FDM   PrinterModelType = 1
	PrinterModelType_SLA   PrinterModelType = 2
)

// Enum value maps for PrinterModelType.
var (
	PrinterModelType_name = map[int32]string{
		0: "OTHER",
		1: "FDM",
		2: "SLA",
	}
	PrinterModelType_value = map[string]int32{
		"OTHER": 0,
		"FDM":   1,
		"SLA":   2,
	}
)

func (x PrinterModelType) Enum() *PrinterModelType {
	p := new(PrinterModelType)
	*p = x
	return p
}

func (x PrinterModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrinterModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_printer_proto_enumTypes[0].Descriptor()
}

func (PrinterModelType) Type() protoreflect.EnumType {
	return &file_printer_proto_enumTypes[0]
}

func (x PrinterModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrinterModelType.Descriptor instead.
func (PrinterModelType) EnumDescriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{0}
}

type PrinterModelMetric int32

const (
	PrinterModelMetric_METRIC_SYSTEM  PrinterModelMetric = 0
	PrinterModelMetric_IMPERIAL_UNITS PrinterModelMetric = 1
)

// Enum value maps for PrinterModelMetric.
var (
	PrinterModelMetric_name = map[int32]string{
		0: "METRIC_SYSTEM",
		1: "IMPERIAL_UNITS",
	}
	PrinterModelMetric_value = map[string]int32{
		"METRIC_SYSTEM":  0,
		"IMPERIAL_UNITS": 1,
	}
)

func (x PrinterModelMetric) Enum() *PrinterModelMetric {
	p := new(PrinterModelMetric)
	*p = x
	return p
}

func (x PrinterModelMetric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrinterModelMetric) Descriptor() protoreflect.EnumDescriptor {
	return file_printer_proto_enumTypes[1].Descriptor()
}

func (PrinterModelMetric) Type() protoreflect.EnumType {
	return &file_printer_proto_enumTypes[1]
}

func (x PrinterModelMetric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrinterModelMetric.Descriptor instead.
func (PrinterModelMetric) EnumDescriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{1}
}

type TemperatureScale int32

const (
	TemperatureScale_CELSIUS    TemperatureScale = 0
	TemperatureScale_FAHRENHEIT TemperatureScale = 1
	TemperatureScale_KELVIN     TemperatureScale = 2
)

// Enum value maps for TemperatureScale.
var (
	TemperatureScale_name = map[int32]string{
		0: "CELSIUS",
		1: "FAHRENHEIT",
		2: "KELVIN",
	}
	TemperatureScale_value = map[string]int32{
		"CELSIUS":    0,
		"FAHRENHEIT": 1,
		"KELVIN":     2,
	}
)

func (x TemperatureScale) Enum() *TemperatureScale {
	p := new(TemperatureScale)
	*p = x
	return p
}

func (x TemperatureScale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemperatureScale) Descriptor() protoreflect.EnumDescriptor {
	return file_printer_proto_enumTypes[2].Descriptor()
}

func (TemperatureScale) Type() protoreflect.EnumType {
	return &file_printer_proto_enumTypes[2]
}

func (x TemperatureScale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemperatureScale.Descriptor instead.
func (TemperatureScale) EnumDescriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{2}
}

type Calibration int32

const (
	Calibration_MANUALLY  Calibration = 0
	Calibration_AUTOMATIC Calibration = 1
)

// Enum value maps for Calibration.
var (
	Calibration_name = map[int32]string{
		0: "MANUALLY",
		1: "AUTOMATIC",
	}
	Calibration_value = map[string]int32{
		"MANUALLY":  0,
		"AUTOMATIC": 1,
	}
)

func (x Calibration) Enum() *Calibration {
	p := new(Calibration)
	*p = x
	return p
}

func (x Calibration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Calibration) Descriptor() protoreflect.EnumDescriptor {
	return file_printer_proto_enumTypes[3].Descriptor()
}

func (Calibration) Type() protoreflect.EnumType {
	return &file_printer_proto_enumTypes[3]
}

func (x Calibration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Calibration.Descriptor instead.
func (Calibration) EnumDescriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{3}
}

type PrinterModelConnectivityType int32

const (
	PrinterModelConnectivityType_CONNECTIVITY_LAN  PrinterModelConnectivityType = 0
	PrinterModelConnectivityType_CONNECTIVITY_WIFI PrinterModelConnectivityType = 1
)

// Enum value maps for PrinterModelConnectivityType.
var (
	PrinterModelConnectivityType_name = map[int32]string{
		0: "CONNECTIVITY_LAN",
		1: "CONNECTIVITY_WIFI",
	}
	PrinterModelConnectivityType_value = map[string]int32{
		"CONNECTIVITY_LAN":  0,
		"CONNECTIVITY_WIFI": 1,
	}
)

func (x PrinterModelConnectivityType) Enum() *PrinterModelConnectivityType {
	p := new(PrinterModelConnectivityType)
	*p = x
	return p
}

func (x PrinterModelConnectivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrinterModelConnectivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_printer_proto_enumTypes[4].Descriptor()
}

func (PrinterModelConnectivityType) Type() protoreflect.EnumType {
	return &file_printer_proto_enumTypes[4]
}

func (x PrinterModelConnectivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrinterModelConnectivityType.Descriptor instead.
func (PrinterModelConnectivityType) EnumDescriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{4}
}

// Allows us to know how to connect to the printer.
type PrinterModelPrintMedium int32

const (
	PrinterModelPrintMedium_USB_DRIVE     PrinterModelPrintMedium = 0
	PrinterModelPrintMedium_LAN           PrinterModelPrintMedium = 1
	PrinterModelPrintMedium_PRUSA_CONNECT PrinterModelPrintMedium = 2
)

// Enum value maps for PrinterModelPrintMedium.
var (
	PrinterModelPrintMedium_name = map[int32]string{
		0: "USB_DRIVE",
		1: "LAN",
		2: "PRUSA_CONNECT",
	}
	PrinterModelPrintMedium_value = map[string]int32{
		"USB_DRIVE":     0,
		"LAN":           1,
		"PRUSA_CONNECT": 2,
	}
)

func (x PrinterModelPrintMedium) Enum() *PrinterModelPrintMedium {
	p := new(PrinterModelPrintMedium)
	*p = x
	return p
}

func (x PrinterModelPrintMedium) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrinterModelPrintMedium) Descriptor() protoreflect.EnumDescriptor {
	return file_printer_proto_enumTypes[5].Descriptor()
}

func (PrinterModelPrintMedium) Type() protoreflect.EnumType {
	return &file_printer_proto_enumTypes[5]
}

func (x PrinterModelPrintMedium) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrinterModelPrintMedium.Descriptor instead.
func (PrinterModelPrintMedium) EnumDescriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{5}
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description *string       `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Tags        []*protos.Tag `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_printer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_printer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{0}
}

func (x *Company) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Company) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Company) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Company) GetTags() []*protos.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PrinterModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description *string          `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Type        PrinterModelType `protobuf:"varint,4,opt,name=type,proto3,enum=printer.PrinterModelType" json:"type,omitempty"`
}

func (x *PrinterModel) Reset() {
	*x = PrinterModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_printer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrinterModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrinterModel) ProtoMessage() {}

func (x *PrinterModel) ProtoReflect() protoreflect.Message {
	mi := &file_printer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrinterModel.ProtoReflect.Descriptor instead.
func (*PrinterModel) Descriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{1}
}

func (x *PrinterModel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PrinterModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrinterModel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PrinterModel) GetType() PrinterModelType {
	if x != nil {
		return x.Type
	}
	return PrinterModelType_OTHER
}

type PrinterModelOtherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PrinterModel *PrinterModel      `protobuf:"bytes,2,opt,name=printer_model,json=printerModel,proto3" json:"printer_model,omitempty"`
	Metric       PrinterModelMetric `protobuf:"varint,3,opt,name=metric,proto3,enum=printer.PrinterModelMetric" json:"metric,omitempty"`
	Width        *float32           `protobuf:"fixed32,4,opt,name=width,proto3,oneof" json:"width,omitempty"`
	Height       *float32           `protobuf:"fixed32,5,opt,name=height,proto3,oneof" json:"height,omitempty"`
	Depth        *float32           `protobuf:"fixed32,6,opt,name=depth,proto3,oneof" json:"depth,omitempty"`
	Weight       *float32           `protobuf:"fixed32,7,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Power        *int32             `protobuf:"varint,8,opt,name=power,proto3,oneof" json:"power,omitempty"`
}

func (x *PrinterModelOtherData) Reset() {
	*x = PrinterModelOtherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_printer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrinterModelOtherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrinterModelOtherData) ProtoMessage() {}

func (x *PrinterModelOtherData) ProtoReflect() protoreflect.Message {
	mi := &file_printer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrinterModelOtherData.ProtoReflect.Descriptor instead.
func (*PrinterModelOtherData) Descriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{2}
}

func (x *PrinterModelOtherData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PrinterModelOtherData) GetPrinterModel() *PrinterModel {
	if x != nil {
		return x.PrinterModel
	}
	return nil
}

func (x *PrinterModelOtherData) GetMetric() PrinterModelMetric {
	if x != nil {
		return x.Metric
	}
	return PrinterModelMetric_METRIC_SYSTEM
}

func (x *PrinterModelOtherData) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *PrinterModelOtherData) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *PrinterModelOtherData) GetDepth() float32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return 0
}

func (x *PrinterModelOtherData) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *PrinterModelOtherData) GetPower() int32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

type PrinterModelFdmData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PrinterModel          *PrinterModel               `protobuf:"bytes,2,opt,name=printer_model,json=printerModel,proto3" json:"printer_model,omitempty"`
	Metric                PrinterModelMetric          `protobuf:"varint,3,opt,name=metric,proto3,enum=printer.PrinterModelMetric" json:"metric,omitempty"`
	Width                 *float32                    `protobuf:"fixed32,4,opt,name=width,proto3,oneof" json:"width,omitempty"`
	Height                *float32                    `protobuf:"fixed32,5,opt,name=height,proto3,oneof" json:"height,omitempty"`
	Depth                 *float32                    `protobuf:"fixed32,6,opt,name=depth,proto3,oneof" json:"depth,omitempty"`
	Weight                *float32                    `protobuf:"fixed32,7,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Power                 *int32                      `protobuf:"varint,8,opt,name=power,proto3,oneof" json:"power,omitempty"`
	PrintWidth            *float32                    `protobuf:"fixed32,9,opt,name=print_width,json=printWidth,proto3,oneof" json:"print_width,omitempty"`
	PrintHeight           *float32                    `protobuf:"fixed32,10,opt,name=print_height,json=printHeight,proto3,oneof" json:"print_height,omitempty"`
	PrintDepth            *float32                    `protobuf:"fixed32,11,opt,name=print_depth,json=printDepth,proto3,oneof" json:"print_depth,omitempty"`
	LayerHeightMin        *float32                    `protobuf:"fixed32,12,opt,name=layer_height_min,json=layerHeightMin,proto3,oneof" json:"layer_height_min,omitempty"`
	LayerHeightMax        *float32                    `protobuf:"fixed32,13,opt,name=layer_height_max,json=layerHeightMax,proto3,oneof" json:"layer_height_max,omitempty"`
	TemperatureScale      *TemperatureScale           `protobuf:"varint,14,opt,name=temperature_scale,json=temperatureScale,proto3,enum=printer.TemperatureScale,oneof" json:"temperature_scale,omitempty"`
	NozzleTemperatureMax  *int32                      `protobuf:"varint,15,opt,name=nozzle_temperature_max,json=nozzleTemperatureMax,proto3,oneof" json:"nozzle_temperature_max,omitempty"`
	HeatbedTemperatureMax *int32                      `protobuf:"varint,16,opt,name=heatbed_temperature_max,json=heatbedTemperatureMax,proto3,oneof" json:"heatbed_temperature_max,omitempty"`
	Connectivities        []*PrinterModelConnectivity `protobuf:"bytes,17,rep,name=connectivities,proto3" json:"connectivities,omitempty"`
	PrintMediums          []PrinterModelPrintMedium   `protobuf:"varint,18,rep,packed,name=print_mediums,json=printMediums,proto3,enum=printer.PrinterModelPrintMedium" json:"print_mediums,omitempty"`
	PrintSurfaces         []*FdmPrintSurface          `protobuf:"bytes,19,rep,name=print_surfaces,json=printSurfaces,proto3" json:"print_surfaces,omitempty"`
	BedCalibration        *Calibration                `protobuf:"varint,20,opt,name=bed_calibration,json=bedCalibration,proto3,enum=printer.Calibration,oneof" json:"bed_calibration,omitempty"`
	FilamentMaterials     []*FilamentMaterial         `protobuf:"bytes,21,rep,name=filament_materials,json=filamentMaterials,proto3" json:"filament_materials,omitempty"`
}

func (x *PrinterModelFdmData) Reset() {
	*x = PrinterModelFdmData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_printer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrinterModelFdmData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrinterModelFdmData) ProtoMessage() {}

func (x *PrinterModelFdmData) ProtoReflect() protoreflect.Message {
	mi := &file_printer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrinterModelFdmData.ProtoReflect.Descriptor instead.
func (*PrinterModelFdmData) Descriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{3}
}

func (x *PrinterModelFdmData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PrinterModelFdmData) GetPrinterModel() *PrinterModel {
	if x != nil {
		return x.PrinterModel
	}
	return nil
}

func (x *PrinterModelFdmData) GetMetric() PrinterModelMetric {
	if x != nil {
		return x.Metric
	}
	return PrinterModelMetric_METRIC_SYSTEM
}

func (x *PrinterModelFdmData) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *PrinterModelFdmData) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *PrinterModelFdmData) GetDepth() float32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return 0
}

func (x *PrinterModelFdmData) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *PrinterModelFdmData) GetPower() int32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *PrinterModelFdmData) GetPrintWidth() float32 {
	if x != nil && x.PrintWidth != nil {
		return *x.PrintWidth
	}
	return 0
}

func (x *PrinterModelFdmData) GetPrintHeight() float32 {
	if x != nil && x.PrintHeight != nil {
		return *x.PrintHeight
	}
	return 0
}

func (x *PrinterModelFdmData) GetPrintDepth() float32 {
	if x != nil && x.PrintDepth != nil {
		return *x.PrintDepth
	}
	return 0
}

func (x *PrinterModelFdmData) GetLayerHeightMin() float32 {
	if x != nil && x.LayerHeightMin != nil {
		return *x.LayerHeightMin
	}
	return 0
}

func (x *PrinterModelFdmData) GetLayerHeightMax() float32 {
	if x != nil && x.LayerHeightMax != nil {
		return *x.LayerHeightMax
	}
	return 0
}

func (x *PrinterModelFdmData) GetTemperatureScale() TemperatureScale {
	if x != nil && x.TemperatureScale != nil {
		return *x.TemperatureScale
	}
	return TemperatureScale_CELSIUS
}

func (x *PrinterModelFdmData) GetNozzleTemperatureMax() int32 {
	if x != nil && x.NozzleTemperatureMax != nil {
		return *x.NozzleTemperatureMax
	}
	return 0
}

func (x *PrinterModelFdmData) GetHeatbedTemperatureMax() int32 {
	if x != nil && x.HeatbedTemperatureMax != nil {
		return *x.HeatbedTemperatureMax
	}
	return 0
}

func (x *PrinterModelFdmData) GetConnectivities() []*PrinterModelConnectivity {
	if x != nil {
		return x.Connectivities
	}
	return nil
}

func (x *PrinterModelFdmData) GetPrintMediums() []PrinterModelPrintMedium {
	if x != nil {
		return x.PrintMediums
	}
	return nil
}

func (x *PrinterModelFdmData) GetPrintSurfaces() []*FdmPrintSurface {
	if x != nil {
		return x.PrintSurfaces
	}
	return nil
}

func (x *PrinterModelFdmData) GetBedCalibration() Calibration {
	if x != nil && x.BedCalibration != nil {
		return *x.BedCalibration
	}
	return Calibration_MANUALLY
}

func (x *PrinterModelFdmData) GetFilamentMaterials() []*FilamentMaterial {
	if x != nil {
		return x.FilamentMaterials
	}
	return nil
}

type PrinterModelSlaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PrinterModel         *PrinterModel               `protobuf:"bytes,2,opt,name=printer_model,json=printerModel,proto3" json:"printer_model,omitempty"`
	Metric               PrinterModelMetric          `protobuf:"varint,3,opt,name=metric,proto3,enum=printer.PrinterModelMetric" json:"metric,omitempty"`
	Width                *float32                    `protobuf:"fixed32,4,opt,name=width,proto3,oneof" json:"width,omitempty"`
	Height               *float32                    `protobuf:"fixed32,5,opt,name=height,proto3,oneof" json:"height,omitempty"`
	Depth                *float32                    `protobuf:"fixed32,6,opt,name=depth,proto3,oneof" json:"depth,omitempty"`
	Weight               *float32                    `protobuf:"fixed32,7,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Power                *int32                      `protobuf:"varint,8,opt,name=power,proto3,oneof" json:"power,omitempty"`
	PrintWidth           *float32                    `protobuf:"fixed32,9,opt,name=print_width,json=printWidth,proto3,oneof" json:"print_width,omitempty"`
	PrintHeight          *float32                    `protobuf:"fixed32,10,opt,name=print_height,json=printHeight,proto3,oneof" json:"print_height,omitempty"`
	PrintDepth           *float32                    `protobuf:"fixed32,11,opt,name=print_depth,json=printDepth,proto3,oneof" json:"print_depth,omitempty"`
	LayerThicknessMin    *float32                    `protobuf:"fixed32,12,opt,name=layer_thickness_min,json=layerThicknessMin,proto3,oneof" json:"layer_thickness_min,omitempty"`
	LayerThicknessMax    *float32                    `protobuf:"fixed32,13,opt,name=layer_thickness_max,json=layerThicknessMax,proto3,oneof" json:"layer_thickness_max,omitempty"`
	ResolutionX          *float32                    `protobuf:"fixed32,14,opt,name=resolution_x,json=resolutionX,proto3,oneof" json:"resolution_x,omitempty"`
	ResolutionY          *float32                    `protobuf:"fixed32,15,opt,name=resolution_y,json=resolutionY,proto3,oneof" json:"resolution_y,omitempty"`
	PrintSpeedPerHourMax *int32                      `protobuf:"varint,16,opt,name=print_speed_per_hour_max,json=printSpeedPerHourMax,proto3,oneof" json:"print_speed_per_hour_max,omitempty"`
	Storage              *int32                      `protobuf:"varint,17,opt,name=storage,proto3,oneof" json:"storage,omitempty"`
	Connectivities       []*PrinterModelConnectivity `protobuf:"bytes,18,rep,name=connectivities,proto3" json:"connectivities,omitempty"`
	PrintMediums         []PrinterModelPrintMedium   `protobuf:"varint,19,rep,packed,name=print_mediums,json=printMediums,proto3,enum=printer.PrinterModelPrintMedium" json:"print_mediums,omitempty"`
	CalibrationZ         *Calibration                `protobuf:"varint,20,opt,name=calibration_z,json=calibrationZ,proto3,enum=printer.Calibration,oneof" json:"calibration_z,omitempty"`
}

func (x *PrinterModelSlaData) Reset() {
	*x = PrinterModelSlaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_printer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrinterModelSlaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrinterModelSlaData) ProtoMessage() {}

func (x *PrinterModelSlaData) ProtoReflect() protoreflect.Message {
	mi := &file_printer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrinterModelSlaData.ProtoReflect.Descriptor instead.
func (*PrinterModelSlaData) Descriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{4}
}

func (x *PrinterModelSlaData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PrinterModelSlaData) GetPrinterModel() *PrinterModel {
	if x != nil {
		return x.PrinterModel
	}
	return nil
}

func (x *PrinterModelSlaData) GetMetric() PrinterModelMetric {
	if x != nil {
		return x.Metric
	}
	return PrinterModelMetric_METRIC_SYSTEM
}

func (x *PrinterModelSlaData) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *PrinterModelSlaData) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *PrinterModelSlaData) GetDepth() float32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return 0
}

func (x *PrinterModelSlaData) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *PrinterModelSlaData) GetPower() int32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *PrinterModelSlaData) GetPrintWidth() float32 {
	if x != nil && x.PrintWidth != nil {
		return *x.PrintWidth
	}
	return 0
}

func (x *PrinterModelSlaData) GetPrintHeight() float32 {
	if x != nil && x.PrintHeight != nil {
		return *x.PrintHeight
	}
	return 0
}

func (x *PrinterModelSlaData) GetPrintDepth() float32 {
	if x != nil && x.PrintDepth != nil {
		return *x.PrintDepth
	}
	return 0
}

func (x *PrinterModelSlaData) GetLayerThicknessMin() float32 {
	if x != nil && x.LayerThicknessMin != nil {
		return *x.LayerThicknessMin
	}
	return 0
}

func (x *PrinterModelSlaData) GetLayerThicknessMax() float32 {
	if x != nil && x.LayerThicknessMax != nil {
		return *x.LayerThicknessMax
	}
	return 0
}

func (x *PrinterModelSlaData) GetResolutionX() float32 {
	if x != nil && x.ResolutionX != nil {
		return *x.ResolutionX
	}
	return 0
}

func (x *PrinterModelSlaData) GetResolutionY() float32 {
	if x != nil && x.ResolutionY != nil {
		return *x.ResolutionY
	}
	return 0
}

func (x *PrinterModelSlaData) GetPrintSpeedPerHourMax() int32 {
	if x != nil && x.PrintSpeedPerHourMax != nil {
		return *x.PrintSpeedPerHourMax
	}
	return 0
}

func (x *PrinterModelSlaData) GetStorage() int32 {
	if x != nil && x.Storage != nil {
		return *x.Storage
	}
	return 0
}

func (x *PrinterModelSlaData) GetConnectivities() []*PrinterModelConnectivity {
	if x != nil {
		return x.Connectivities
	}
	return nil
}

func (x *PrinterModelSlaData) GetPrintMediums() []PrinterModelPrintMedium {
	if x != nil {
		return x.PrintMediums
	}
	return nil
}

func (x *PrinterModelSlaData) GetCalibrationZ() Calibration {
	if x != nil && x.CalibrationZ != nil {
		return *x.CalibrationZ
	}
	return Calibration_MANUALLY
}

type FilamentDiameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value  float32            `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Metric PrinterModelMetric `protobuf:"varint,3,opt,name=metric,proto3,enum=printer.PrinterModelMetric" json:"metric,omitempty"`
}

func (x *FilamentDiameter) Reset() {
	*x = FilamentDiameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_printer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilamentDiameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilamentDiameter) ProtoMessage() {}

func (x *FilamentDiameter) ProtoReflect() protoreflect.Message {
	mi := &file_printer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilamentDiameter.ProtoReflect.Descriptor instead.
func (*FilamentDiameter) Descriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{5}
}

func (x *FilamentDiameter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilamentDiameter) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FilamentDiameter) GetMetric() PrinterModelMetric {
	if x != nil {
		return x.Metric
	}
	return PrinterModelMetric_METRIC_SYSTEM
}

// TODO: Filament materials have different properties and specs (heat, ...).
type FilamentMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *FilamentMaterial) Reset() {
	*x = FilamentMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_printer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilamentMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilamentMaterial) ProtoMessage() {}

func (x *FilamentMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_printer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilamentMaterial.ProtoReflect.Descriptor instead.
func (*FilamentMaterial) Descriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{6}
}

func (x *FilamentMaterial) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilamentMaterial) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilamentMaterial) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type FdmPrintSurface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FdmPrintSurface) Reset() {
	*x = FdmPrintSurface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_printer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FdmPrintSurface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FdmPrintSurface) ProtoMessage() {}

func (x *FdmPrintSurface) ProtoReflect() protoreflect.Message {
	mi := &file_printer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FdmPrintSurface.ProtoReflect.Descriptor instead.
func (*FdmPrintSurface) Descriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{7}
}

func (x *FdmPrintSurface) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FdmPrintSurface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PrinterModelConnectivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type PrinterModelConnectivityType `protobuf:"varint,3,opt,name=type,proto3,enum=printer.PrinterModelConnectivityType" json:"type,omitempty"`
}

func (x *PrinterModelConnectivity) Reset() {
	*x = PrinterModelConnectivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_printer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrinterModelConnectivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrinterModelConnectivity) ProtoMessage() {}

func (x *PrinterModelConnectivity) ProtoReflect() protoreflect.Message {
	mi := &file_printer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrinterModelConnectivity.ProtoReflect.Descriptor instead.
func (*PrinterModelConnectivity) Descriptor() ([]byte, []int) {
	return file_printer_proto_rawDescGZIP(), []int{8}
}

func (x *PrinterModelConnectivity) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PrinterModelConnectivity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrinterModelConnectivity) GetType() PrinterModelConnectivityType {
	if x != nil {
		return x.Type
	}
	return PrinterModelConnectivityType_CONNECTIVITY_LAN
}

var File_printer_proto protoreflect.FileDescriptor

var file_printer_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x74, 0x61,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x74,
	0x61, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x33, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x91, 0x0a, 0x0a, 0x13, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x64, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x33, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x07, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x0e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x0e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x0a, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16,
	0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x14,
	0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x68, 0x65, 0x61, 0x74, 0x62,
	0x65, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x15, 0x68, 0x65, 0x61, 0x74,
	0x62, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x64, 0x6d, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x53,
	0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0d, 0x52, 0x0e, 0x62, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x66,
	0x69, 0x6c, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x6c, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x08,
	0x0a, 0x13, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6c,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74,
	0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x08, 0x52, 0x11, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x68, 0x69, 0x63, 0x6b,
	0x6e, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x58, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0b, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x0c, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x73, 0x12, 0x3e, 0x0a,
	0x0d, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0e, 0x52, 0x0c, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x69, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x69,
	0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x22, 0x75, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x75,
	0x0a, 0x10, 0x46, 0x69, 0x6c, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x0f, 0x46, 0x64, 0x6d, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x2a, 0x2f, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x44, 0x4d, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x4c, 0x41, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x12, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4d, 0x50, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x53, 0x10, 0x01, 0x2a, 0x3b, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45,
	0x4c, 0x53, 0x49, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x48, 0x52, 0x45,
	0x4e, 0x48, 0x45, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x4c, 0x56, 0x49,
	0x4e, 0x10, 0x02, 0x2a, 0x2a, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x2a,
	0x4b, 0x0a, 0x1c, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x17,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x42, 0x5f, 0x44,
	0x52, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x41, 0x4e, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x52, 0x55, 0x53, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x10, 0x02, 0x42, 0x0d, 0x5a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_printer_proto_rawDescOnce sync.Once
	file_printer_proto_rawDescData = file_printer_proto_rawDesc
)

func file_printer_proto_rawDescGZIP() []byte {
	file_printer_proto_rawDescOnce.Do(func() {
		file_printer_proto_rawDescData = protoimpl.X.CompressGZIP(file_printer_proto_rawDescData)
	})
	return file_printer_proto_rawDescData
}

var file_printer_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_printer_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_printer_proto_goTypes = []interface{}{
	(PrinterModelType)(0),             // 0: printer.PrinterModelType
	(PrinterModelMetric)(0),           // 1: printer.PrinterModelMetric
	(TemperatureScale)(0),             // 2: printer.TemperatureScale
	(Calibration)(0),                  // 3: printer.Calibration
	(PrinterModelConnectivityType)(0), // 4: printer.PrinterModelConnectivityType
	(PrinterModelPrintMedium)(0),      // 5: printer.PrinterModelPrintMedium
	(*Company)(nil),                   // 6: printer.Company
	(*PrinterModel)(nil),              // 7: printer.PrinterModel
	(*PrinterModelOtherData)(nil),     // 8: printer.PrinterModelOtherData
	(*PrinterModelFdmData)(nil),       // 9: printer.PrinterModelFdmData
	(*PrinterModelSlaData)(nil),       // 10: printer.PrinterModelSlaData
	(*FilamentDiameter)(nil),          // 11: printer.FilamentDiameter
	(*FilamentMaterial)(nil),          // 12: printer.FilamentMaterial
	(*FdmPrintSurface)(nil),           // 13: printer.FdmPrintSurface
	(*PrinterModelConnectivity)(nil),  // 14: printer.PrinterModelConnectivity
	(*protos.Tag)(nil),                // 15: tag.Tag
}
var file_printer_proto_depIdxs = []int32{
	15, // 0: printer.Company.tags:type_name -> tag.Tag
	0,  // 1: printer.PrinterModel.type:type_name -> printer.PrinterModelType
	7,  // 2: printer.PrinterModelOtherData.printer_model:type_name -> printer.PrinterModel
	1,  // 3: printer.PrinterModelOtherData.metric:type_name -> printer.PrinterModelMetric
	7,  // 4: printer.PrinterModelFdmData.printer_model:type_name -> printer.PrinterModel
	1,  // 5: printer.PrinterModelFdmData.metric:type_name -> printer.PrinterModelMetric
	2,  // 6: printer.PrinterModelFdmData.temperature_scale:type_name -> printer.TemperatureScale
	14, // 7: printer.PrinterModelFdmData.connectivities:type_name -> printer.PrinterModelConnectivity
	5,  // 8: printer.PrinterModelFdmData.print_mediums:type_name -> printer.PrinterModelPrintMedium
	13, // 9: printer.PrinterModelFdmData.print_surfaces:type_name -> printer.FdmPrintSurface
	3,  // 10: printer.PrinterModelFdmData.bed_calibration:type_name -> printer.Calibration
	12, // 11: printer.PrinterModelFdmData.filament_materials:type_name -> printer.FilamentMaterial
	7,  // 12: printer.PrinterModelSlaData.printer_model:type_name -> printer.PrinterModel
	1,  // 13: printer.PrinterModelSlaData.metric:type_name -> printer.PrinterModelMetric
	14, // 14: printer.PrinterModelSlaData.connectivities:type_name -> printer.PrinterModelConnectivity
	5,  // 15: printer.PrinterModelSlaData.print_mediums:type_name -> printer.PrinterModelPrintMedium
	3,  // 16: printer.PrinterModelSlaData.calibration_z:type_name -> printer.Calibration
	1,  // 17: printer.FilamentDiameter.metric:type_name -> printer.PrinterModelMetric
	4,  // 18: printer.PrinterModelConnectivity.type:type_name -> printer.PrinterModelConnectivityType
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_printer_proto_init() }
func file_printer_proto_init() {
	if File_printer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_printer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_printer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrinterModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_printer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrinterModelOtherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_printer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrinterModelFdmData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_printer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrinterModelSlaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_printer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilamentDiameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_printer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilamentMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_printer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FdmPrintSurface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_printer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrinterModelConnectivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_printer_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_printer_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_printer_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_printer_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_printer_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_printer_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_printer_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_printer_proto_goTypes,
		DependencyIndexes: file_printer_proto_depIdxs,
		EnumInfos:         file_printer_proto_enumTypes,
		MessageInfos:      file_printer_proto_msgTypes,
	}.Build()
	File_printer_proto = out.File
	file_printer_proto_rawDesc = nil
	file_printer_proto_goTypes = nil
	file_printer_proto_depIdxs = nil
}
