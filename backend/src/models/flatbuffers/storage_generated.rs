// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod hiveprint {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(i8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum FileProtocol {
  LOCALE = 0,
  NFS = 1,
  SMB = 2,

}

pub const ENUM_MIN_FILE_PROTOCOL: i8 = 0;
pub const ENUM_MAX_FILE_PROTOCOL: i8 = 2;

impl<'a> flatbuffers::Follow<'a> for FileProtocol {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for FileProtocol {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = i8::to_le(self as i8);
    let p = &n as *const i8 as *const FileProtocol;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = i8::from_le(self as i8);
    let p = &n as *const i8 as *const FileProtocol;
    unsafe { *p }
  }
}

impl flatbuffers::Push for FileProtocol {
    type Output = FileProtocol;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<FileProtocol>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_FILE_PROTOCOL:[FileProtocol; 3] = [
  FileProtocol::LOCALE,
  FileProtocol::NFS,
  FileProtocol::SMB
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_FILE_PROTOCOL:[&'static str; 3] = [
    "LOCALE",
    "NFS",
    "SMB"
];

pub fn enum_name_file_protocol(e: FileProtocol) -> &'static str {
  let index = e as i8;
  ENUM_NAMES_FILE_PROTOCOL[index as usize]
}

pub enum StorageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Storage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Storage<'a> {
    type Inner = Storage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Storage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Storage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args StorageArgs<'args>) -> flatbuffers::WIPOffset<Storage<'bldr>> {
      let mut builder = StorageBuilder::new(_fbb);
      if let Some(x) = args.password { builder.add_password(x); }
      if let Some(x) = args.user { builder.add_user(x); }
      if let Some(x) = args.hostname { builder.add_hostname(x); }
      if let Some(x) = args.description { builder.add_description(x); }
      if let Some(x) = args.name { builder.add_name(x); }
      builder.add_protocol_minor_version(args.protocol_minor_version);
      builder.add_protocol_major_version(args.protocol_major_version);
      builder.add_protocol(args.protocol);
      builder.finish()
    }

    pub const VT_NAME: flatbuffers::VOffsetT = 4;
    pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 6;
    pub const VT_HOSTNAME: flatbuffers::VOffsetT = 8;
    pub const VT_USER: flatbuffers::VOffsetT = 10;
    pub const VT_PASSWORD: flatbuffers::VOffsetT = 12;
    pub const VT_PROTOCOL: flatbuffers::VOffsetT = 14;
    pub const VT_PROTOCOL_MAJOR_VERSION: flatbuffers::VOffsetT = 16;
    pub const VT_PROTOCOL_MINOR_VERSION: flatbuffers::VOffsetT = 18;

  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Storage::VT_NAME, None)
  }
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Storage::VT_DESCRIPTION, None)
  }
  #[inline]
  pub fn hostname(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Storage::VT_HOSTNAME, None)
  }
  #[inline]
  pub fn user(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Storage::VT_USER, None)
  }
  #[inline]
  pub fn password(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Storage::VT_PASSWORD, None)
  }
  #[inline]
  pub fn protocol(&self) -> FileProtocol {
    self._tab.get::<FileProtocol>(Storage::VT_PROTOCOL, Some(FileProtocol::LOCALE)).unwrap()
  }
  #[inline]
  pub fn protocol_major_version(&self) -> i16 {
    self._tab.get::<i16>(Storage::VT_PROTOCOL_MAJOR_VERSION, Some(0)).unwrap()
  }
  #[inline]
  pub fn protocol_minor_version(&self) -> i16 {
    self._tab.get::<i16>(Storage::VT_PROTOCOL_MINOR_VERSION, Some(0)).unwrap()
  }
}

pub struct StorageArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub hostname: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub user: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub password: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub protocol: FileProtocol,
    pub protocol_major_version: i16,
    pub protocol_minor_version: i16,
}
impl<'a> Default for StorageArgs<'a> {
    #[inline]
    fn default() -> Self {
        StorageArgs {
            name: None,
            description: None,
            hostname: None,
            user: None,
            password: None,
            protocol: FileProtocol::LOCALE,
            protocol_major_version: 0,
            protocol_minor_version: 0,
        }
    }
}
pub struct StorageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StorageBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Storage::VT_NAME, name);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Storage::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_hostname(&mut self, hostname: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Storage::VT_HOSTNAME, hostname);
  }
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Storage::VT_USER, user);
  }
  #[inline]
  pub fn add_password(&mut self, password: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Storage::VT_PASSWORD, password);
  }
  #[inline]
  pub fn add_protocol(&mut self, protocol: FileProtocol) {
    self.fbb_.push_slot::<FileProtocol>(Storage::VT_PROTOCOL, protocol, FileProtocol::LOCALE);
  }
  #[inline]
  pub fn add_protocol_major_version(&mut self, protocol_major_version: i16) {
    self.fbb_.push_slot::<i16>(Storage::VT_PROTOCOL_MAJOR_VERSION, protocol_major_version, 0);
  }
  #[inline]
  pub fn add_protocol_minor_version(&mut self, protocol_minor_version: i16) {
    self.fbb_.push_slot::<i16>(Storage::VT_PROTOCOL_MINOR_VERSION, protocol_minor_version, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StorageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StorageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Storage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_storage<'a>(buf: &'a [u8]) -> Storage<'a> {
  flatbuffers::get_root::<Storage<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_storage<'a>(buf: &'a [u8]) -> Storage<'a> {
  flatbuffers::get_size_prefixed_root::<Storage<'a>>(buf)
}

#[inline]
pub fn finish_storage_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Storage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_storage_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Storage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Hiveprint

